{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "kzlHsNU_fXtQ",
        "1gRqWiLsZR44",
        "C61eLwaXkrvb",
        "m3QRn98gArvt",
        "ZOCdwKpStnOJ"
      ],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "<font color='#b86fa5'> **PROYECT DESCRIPTION**\n",
        "\n",
        "<font color='#b86fa5'> This project is about exploring the potential of the K-Pop market for a Spanish record label. The goal is to analyze a database of K-Pop artists spanning from 1992 to 2020 to uncover trends and identify successful groups that could perform well on tours in Spain and Latin America.\n",
        "\n",
        "<font color='#b86fa5'>**PROJECT MAIN OBJECTIVES**\n",
        "\n",
        "<font color='#b86fa5'> **1. Discover New Talents:** Identify emerging K-Pop groups with similar characteristics to past successful artists.\n",
        "\n",
        "<font color='#b86fa5'>**2. Plan a Summer Festival:** Design a lineup for a summer festival featuring multiple K-Pop groups to boost the genre’s popularity in Spain and Latin America."
      ],
      "metadata": {
        "id": "rhRlCTFgSJ7I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#<font color='#b86fa5'> **1. DATA PREPARATION**\n",
        "\n"
      ],
      "metadata": {
        "id": "twCtK0WeQxoV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bmy5qlYWMTBN"
      },
      "outputs": [],
      "source": [
        "# Import libreries\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Upload the original datasets\n",
        "\n",
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 177
        },
        "id": "ZLtaH_UCQfJv",
        "outputId": "fe71078d-0cee-4140-db3d-bb83e9ee4581"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f64b5f0e-0b23-4220-bb1a-4e3b46599a12\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f64b5f0e-0b23-4220-bb1a-4e3b46599a12\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kpop_idols.csv to kpop_idols.csv\n",
            "Saving kpop_idols_boy_groups.csv to kpop_idols_boy_groups.csv\n",
            "Saving kpop_idols_girl_groups.csv to kpop_idols_girl_groups.csv\n",
            "Saving kpop_music_videos.csv to kpop_music_videos.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the original datasets\n",
        "\n",
        "kpop_idols = pd.read_csv('kpop_idols.csv')\n",
        "kpop_boy_groups = pd.read_csv('kpop_idols_boy_groups.csv')\n",
        "kpop_girl_groups = pd.read_csv('kpop_idols_girl_groups.csv')\n",
        "kpop_music_videos = pd.read_csv('kpop_music_videos.csv')"
      ],
      "metadata": {
        "id": "tsy6EIGPV0na"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "sns.set(style='whitegrid', palette='pastel')"
      ],
      "metadata": {
        "id": "7HmGFuEZvbS2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#<font color='#b86fa5'> **2. DATA EXPLORATION**"
      ],
      "metadata": {
        "id": "PyUaqrKFWeEi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "kpop_idols.head(3) # Most popular artists"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fn_S1ADXWpmb",
        "outputId": "dee486fb-019a-4343-c81d-6a7bfca10230"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Stage Name      Full Name Korean Name K. Stage Name Date of Birth  \\\n",
              "0        A.M  Seong Hyunwoo         성현우           에이엠    1996-12-31   \n",
              "1        Ace  Jang Wooyoung         장우영           에이스    1992-08-28   \n",
              "2       Aeji      Kwon Aeji         권애지            애지    1999-10-25   \n",
              "\n",
              "       Group      Country Birthplace Other Group Gender  \n",
              "0  Limitless  South Korea        NaN         NaN      M  \n",
              "1        VAV  South Korea        NaN         NaN      M  \n",
              "2    Hashtag  South Korea      Daegu         NaN      F  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-96b0bdcd-71e6-4ab2-badb-89b314574be0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stage Name</th>\n",
              "      <th>Full Name</th>\n",
              "      <th>Korean Name</th>\n",
              "      <th>K. Stage Name</th>\n",
              "      <th>Date of Birth</th>\n",
              "      <th>Group</th>\n",
              "      <th>Country</th>\n",
              "      <th>Birthplace</th>\n",
              "      <th>Other Group</th>\n",
              "      <th>Gender</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A.M</td>\n",
              "      <td>Seong Hyunwoo</td>\n",
              "      <td>성현우</td>\n",
              "      <td>에이엠</td>\n",
              "      <td>1996-12-31</td>\n",
              "      <td>Limitless</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ace</td>\n",
              "      <td>Jang Wooyoung</td>\n",
              "      <td>장우영</td>\n",
              "      <td>에이스</td>\n",
              "      <td>1992-08-28</td>\n",
              "      <td>VAV</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Aeji</td>\n",
              "      <td>Kwon Aeji</td>\n",
              "      <td>권애지</td>\n",
              "      <td>애지</td>\n",
              "      <td>1999-10-25</td>\n",
              "      <td>Hashtag</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Daegu</td>\n",
              "      <td>NaN</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-96b0bdcd-71e6-4ab2-badb-89b314574be0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-96b0bdcd-71e6-4ab2-badb-89b314574be0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-96b0bdcd-71e6-4ab2-badb-89b314574be0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-736141d0-593e-4235-8fe0-7c16dcc25a48\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-736141d0-593e-4235-8fe0-7c16dcc25a48')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-736141d0-593e-4235-8fe0-7c16dcc25a48 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "kpop_idols",
              "summary": "{\n  \"name\": \"kpop_idols\",\n  \"rows\": 1310,\n  \"fields\": [\n    {\n      \"column\": \"Stage Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1135,\n        \"samples\": [\n          \"Seea\",\n          \"Sunghyun\",\n          \"Jaeun\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Full Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1251,\n        \"samples\": [\n          \"Kang Mina\",\n          \"Choi Junhong\",\n          \"Jang Yuji\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Korean Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1241,\n        \"samples\": [\n          \"\\ubc15\\uc138\\uc5f0\",\n          \"\\ub9f9\\ucc44\\uc194\",\n          \"\\uc774\\uac00\\ud604\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K. Stage Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1082,\n        \"samples\": [\n          \"\\ubd04\",\n          \"\\uc9c4\\uc9c4\",\n          \"\\ub809\\uc2a4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Birth\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1181,\n        \"samples\": [\n          \"1995-09-02\",\n          \"1996-03-16\",\n          \"1988-02-22\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 208,\n        \"samples\": [\n          \"Astin\",\n          \"RedSquare\",\n          \"fromis_9\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"Malaysia\",\n          \"Canada\",\n          \"South Korea\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birthplace\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"Vancouver\",\n          \"Yeongcheon\",\n          \"Osan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Other Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 55,\n        \"samples\": [\n          \"AOA BLACK\",\n          \"C.I.V.A, I.B.I\",\n          \"Rainbow Pixie\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"F\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kpop_idols.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WRPeeQQoXAVp",
        "outputId": "3a4b996e-2ede-4869-df59-bc566b0d680c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1310 entries, 0 to 1309\n",
            "Data columns (total 10 columns):\n",
            " #   Column         Non-Null Count  Dtype \n",
            "---  ------         --------------  ----- \n",
            " 0   Stage Name     1310 non-null   object\n",
            " 1   Full Name      1304 non-null   object\n",
            " 2   Korean Name    1304 non-null   object\n",
            " 3   K. Stage Name  1309 non-null   object\n",
            " 4   Date of Birth  1310 non-null   object\n",
            " 5   Group          1219 non-null   object\n",
            " 6   Country        1310 non-null   object\n",
            " 7   Birthplace     689 non-null    object\n",
            " 8   Other Group    122 non-null    object\n",
            " 9   Gender         1310 non-null   object\n",
            "dtypes: object(10)\n",
            "memory usage: 102.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kpop_boy_groups.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QO2AsdjhWt8b",
        "outputId": "f15c33a2-3db3-4234-af50-9f89ca1e0ecd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Name Short Korean Name       Debut    Company  Members  Orig. Memb.  \\\n",
              "0   100%   NaN        백퍼센트  2012-09-18  TOP Media        4            7   \n",
              "1    14U   NaN         원포유  2017-04-17         BG       14           14   \n",
              "2  1the9   NaN        원더나인  2019-02-09        MBK        9            9   \n",
              "\n",
              "  Fanclub Name Active  \n",
              "0   Perfection    Yes  \n",
              "1          NaN    Yes  \n",
              "2          NaN    Yes  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-899d536c-edee-40d6-99d3-422e93b57230\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Short</th>\n",
              "      <th>Korean Name</th>\n",
              "      <th>Debut</th>\n",
              "      <th>Company</th>\n",
              "      <th>Members</th>\n",
              "      <th>Orig. Memb.</th>\n",
              "      <th>Fanclub Name</th>\n",
              "      <th>Active</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100%</td>\n",
              "      <td>NaN</td>\n",
              "      <td>백퍼센트</td>\n",
              "      <td>2012-09-18</td>\n",
              "      <td>TOP Media</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>Perfection</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14U</td>\n",
              "      <td>NaN</td>\n",
              "      <td>원포유</td>\n",
              "      <td>2017-04-17</td>\n",
              "      <td>BG</td>\n",
              "      <td>14</td>\n",
              "      <td>14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1the9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>원더나인</td>\n",
              "      <td>2019-02-09</td>\n",
              "      <td>MBK</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-899d536c-edee-40d6-99d3-422e93b57230')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-899d536c-edee-40d6-99d3-422e93b57230 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-899d536c-edee-40d6-99d3-422e93b57230');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-74bb51ef-d28f-4f08-b466-dd55e5b1873a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-74bb51ef-d28f-4f08-b466-dd55e5b1873a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-74bb51ef-d28f-4f08-b466-dd55e5b1873a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "kpop_boy_groups",
              "summary": "{\n  \"name\": \"kpop_boy_groups\",\n  \"rows\": 147,\n  \"fields\": [\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"TRAX\",\n          \"H.O.T\",\n          \"VERMUDA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Short\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"ACE\",\n          \"BAP\",\n          \"M.fect\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Korean Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"\\ud2b8\\ub799\\uc2a4\",\n          \"\\uc5d0\\uc774\\uce58\\uc624\\ud2f0\",\n          \"\\ubc84\\ubba4\\ub2e4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 143,\n        \"samples\": [\n          \"2010-07-09\",\n          \"2017-05-25\",\n          \"2019-01-21\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 110,\n        \"samples\": [\n          \"RBW\",\n          \"DS\",\n          \"JYP, Big Hit\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Members\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          10,\n          13,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Orig. Memb.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2,\n          18,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fanclub Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 60,\n        \"samples\": [\n          \"Perfection\",\n          \"A-LIGHT\",\n          \"Monbebe\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Active\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Yes\",\n          \"No\",\n          \"Hiatus\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kpop_boy_groups.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s50EpjM8XGA1",
        "outputId": "6440d14e-47b3-44bc-b714-5ede61c1a582"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 147 entries, 0 to 146\n",
            "Data columns (total 9 columns):\n",
            " #   Column        Non-Null Count  Dtype \n",
            "---  ------        --------------  ----- \n",
            " 0   Name          147 non-null    object\n",
            " 1   Short         18 non-null     object\n",
            " 2   Korean Name   147 non-null    object\n",
            " 3   Debut         147 non-null    object\n",
            " 4   Company       146 non-null    object\n",
            " 5   Members       147 non-null    int64 \n",
            " 6   Orig. Memb.   147 non-null    int64 \n",
            " 7   Fanclub Name  61 non-null     object\n",
            " 8   Active        147 non-null    object\n",
            "dtypes: int64(2), object(7)\n",
            "memory usage: 10.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kpop_girl_groups.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ba5uIuaRWwaE",
        "outputId": "71a5cedd-f19a-40a8-c58e-226fa34a40f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Name Short Korean Name       Debut  Company  Members  Orig. Memb.  \\\n",
              "0  (G)I-DLE   NaN     (여자)아이들  2018-05-02     Cube        6            6   \n",
              "1       15&   NaN       피프틴앤드  2012-10-05      JYP        2            2   \n",
              "2     2EYES   NaN        투아이즈  2013-07-20  SidusHQ        4            5   \n",
              "\n",
              "  Fanclub Name Active  \n",
              "0          NaN    Yes  \n",
              "1          NaN     No  \n",
              "2          NaN     No  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d5053463-3a14-4dc6-bc62-767d0ab7266d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Short</th>\n",
              "      <th>Korean Name</th>\n",
              "      <th>Debut</th>\n",
              "      <th>Company</th>\n",
              "      <th>Members</th>\n",
              "      <th>Orig. Memb.</th>\n",
              "      <th>Fanclub Name</th>\n",
              "      <th>Active</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(G)I-DLE</td>\n",
              "      <td>NaN</td>\n",
              "      <td>(여자)아이들</td>\n",
              "      <td>2018-05-02</td>\n",
              "      <td>Cube</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15&amp;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>피프틴앤드</td>\n",
              "      <td>2012-10-05</td>\n",
              "      <td>JYP</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2EYES</td>\n",
              "      <td>NaN</td>\n",
              "      <td>투아이즈</td>\n",
              "      <td>2013-07-20</td>\n",
              "      <td>SidusHQ</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5053463-3a14-4dc6-bc62-767d0ab7266d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d5053463-3a14-4dc6-bc62-767d0ab7266d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d5053463-3a14-4dc6-bc62-767d0ab7266d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d34af06b-2cab-442b-a73d-830a24ed19b5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d34af06b-2cab-442b-a73d-830a24ed19b5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d34af06b-2cab-442b-a73d-830a24ed19b5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "kpop_girl_groups",
              "summary": "{\n  \"name\": \"kpop_girl_groups\",\n  \"rows\": 152,\n  \"fields\": [\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 152,\n        \"samples\": [\n          \"Girlkind\",\n          \"We Girls\",\n          \"Ladies' Code\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Short\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"Nine Muses\",\n          \"CSJH\",\n          \"OHMG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Korean Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 152,\n        \"samples\": [\n          \"\\uac78\\uce74\\uc778\\ub4dc\",\n          \"\\uc704\\uac78\\uc2a4\",\n          \"\\ub808\\uc774\\ub514\\uc2a4 \\ucf54\\ub4dc\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 149,\n        \"samples\": [\n          \"2011-03-18\",\n          \"1997-07-05\",\n          \"2013-12-11\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 120,\n        \"samples\": [\n          \"Hunus\",\n          \"Stardom\",\n          \"GH\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Members\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 13,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          8,\n          6,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Orig. Memb.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 12,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          10,\n          2,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fanclub Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 46,\n        \"samples\": [\n          \"Mercury\",\n          \"Hello Cupid\",\n          \"High Class\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Active\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Yes\",\n          \"No\",\n          \"Hiatus\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kpop_girl_groups.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1XY4IrwQXH6A",
        "outputId": "08a555ba-ab28-48c9-909a-22ae66852657"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 152 entries, 0 to 151\n",
            "Data columns (total 9 columns):\n",
            " #   Column        Non-Null Count  Dtype \n",
            "---  ------        --------------  ----- \n",
            " 0   Name          152 non-null    object\n",
            " 1   Short         21 non-null     object\n",
            " 2   Korean Name   152 non-null    object\n",
            " 3   Debut         152 non-null    object\n",
            " 4   Company       152 non-null    object\n",
            " 5   Members       152 non-null    int64 \n",
            " 6   Orig. Memb.   152 non-null    int64 \n",
            " 7   Fanclub Name  46 non-null     object\n",
            " 8   Active        152 non-null    object\n",
            "dtypes: int64(2), object(7)\n",
            "memory usage: 10.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kpop_music_videos.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A1XJyueVW1Ud",
        "outputId": "268cb106-ae08-47be-dd9d-f30ba80510de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date     Artist           Song Name Korean Name Director  \\\n",
              "0  2020-05-22    Agust D           Daechwita         대취타      NaN   \n",
              "1  2020-05-21      Yubin      yaya (Me Time)          넵넵      NaN   \n",
              "2  2020-05-21  OnlyOneOf  Angel (prod. GRAY)         NaN      NaN   \n",
              "\n",
              "                          Video       Type Release  \n",
              "0  https://youtu.be/qGjAWJ2zWWI   Boy Solo   Major  \n",
              "1  https://youtu.be/BJD0arHF_5c  Girl Solo   Major  \n",
              "2  https://youtu.be/vVTo8p72FxQ        Boy   Major  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7286d039-4425-4d7e-aa4e-18e1ca2f1d89\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Artist</th>\n",
              "      <th>Song Name</th>\n",
              "      <th>Korean Name</th>\n",
              "      <th>Director</th>\n",
              "      <th>Video</th>\n",
              "      <th>Type</th>\n",
              "      <th>Release</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-05-22</td>\n",
              "      <td>Agust D</td>\n",
              "      <td>Daechwita</td>\n",
              "      <td>대취타</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://youtu.be/qGjAWJ2zWWI</td>\n",
              "      <td>Boy Solo</td>\n",
              "      <td>Major</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-05-21</td>\n",
              "      <td>Yubin</td>\n",
              "      <td>yaya (Me Time)</td>\n",
              "      <td>넵넵</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://youtu.be/BJD0arHF_5c</td>\n",
              "      <td>Girl Solo</td>\n",
              "      <td>Major</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-05-21</td>\n",
              "      <td>OnlyOneOf</td>\n",
              "      <td>Angel (prod. GRAY)</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://youtu.be/vVTo8p72FxQ</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7286d039-4425-4d7e-aa4e-18e1ca2f1d89')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7286d039-4425-4d7e-aa4e-18e1ca2f1d89 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7286d039-4425-4d7e-aa4e-18e1ca2f1d89');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7a0ec71d-05cc-4d62-b4d7-f882f68cffc9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7a0ec71d-05cc-4d62-b4d7-f882f68cffc9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7a0ec71d-05cc-4d62-b4d7-f882f68cffc9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "kpop_music_videos",
              "summary": "{\n  \"name\": \"kpop_music_videos\",\n  \"rows\": 3772,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2216,\n        \"samples\": [\n          \"2016-06-19\",\n          \"2019-06-25\",\n          \"2015-09-22\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Artist\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 856,\n        \"samples\": [\n          \"KARA\",\n          \"T-ara\",\n          \"ENOi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Song Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3247,\n        \"samples\": [\n          \"Goodbye To Romance\",\n          \"Your Voice\",\n          \"Mic Drop (Steve Aoki Remix)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Korean Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2597,\n        \"samples\": [\n          \"\\ud0ac\\ub514\\uc2a4\\ub7ec\\ube0c\",\n          \"\\ucd94\\uaca9\\uc790\",\n          \"\\uc5ec\\uc790\\uc774\\ub2c8\\uae4c\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Director\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 93,\n        \"samples\": [\n          \"Shin Heewon\",\n          \"Tiger Cave\",\n          \"Kim Beomchul\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3765,\n        \"samples\": [\n          \"https://youtu.be/42A-rFdralM\",\n          \"https://youtu.be/aYYMDmhfMpk\",\n          \"https://youtu.be/M-ZBHqUlBPo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Boy Solo\",\n          \"Girl Solo\",\n          \"Special\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Japanese\",\n          \"English\",\n          \"Major\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kpop_music_videos.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bqC0pf5qXKZ6",
        "outputId": "5d1f8775-f766-45c5-fff1-adb3417e1765"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3772 entries, 0 to 3771\n",
            "Data columns (total 8 columns):\n",
            " #   Column       Non-Null Count  Dtype \n",
            "---  ------       --------------  ----- \n",
            " 0   Date         3772 non-null   object\n",
            " 1   Artist       3772 non-null   object\n",
            " 2   Song Name    3771 non-null   object\n",
            " 3   Korean Name  2786 non-null   object\n",
            " 4   Director     627 non-null    object\n",
            " 5   Video        3772 non-null   object\n",
            " 6   Type         3772 non-null   object\n",
            " 7   Release      3759 non-null   object\n",
            "dtypes: object(8)\n",
            "memory usage: 235.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#<font color='#b86fa5'> **3. DATA CLEANING**"
      ],
      "metadata": {
        "id": "6ba2AmukYpFW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Create a copy**"
      ],
      "metadata": {
        "id": "dXz2t1cjZkl2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "idols = kpop_idols.copy()\n",
        "boys = kpop_boy_groups.copy()\n",
        "girls = kpop_girl_groups.copy()\n",
        "videos = kpop_music_videos.copy()"
      ],
      "metadata": {
        "id": "-DX8ALSYZn_p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Missing values**"
      ],
      "metadata": {
        "id": "Sj7nOvtlY8qn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a function to display missing values summary\n",
        "\n",
        "def display_missing_values(df, df_name):\n",
        "    print(f\"\\n--- Missing Values in {df_name} ---\")\n",
        "    missing_values = df.isnull().sum()\n",
        "    total_values = df.shape[0]  # Get total number of rows\n",
        "    missing_percentage = (missing_values / total_values) * 100  # Calculate the percentage of missing values\n",
        "\n",
        "    # Create a DataFrame to show both the number of missing values and their percentage\n",
        "    missing_data = pd.DataFrame({\n",
        "        'Missing Values': missing_values,\n",
        "        'Percentage': missing_percentage\n",
        "    })\n",
        "\n",
        "    # Display the missing data summary sorted by the percentage of missing values\n",
        "    missing_data = missing_data[missing_data['Missing Values'] > 0].sort_values(by='Percentage', ascending=False)\n",
        "\n",
        "    # Display only columns with missing data\n",
        "    print(missing_data)\n",
        "    print(\"\\n\")\n",
        "\n",
        "# Apply the function to each DataFrame\n",
        "display_missing_values(idols, 'IDOLS')\n",
        "display_missing_values(boys, 'BOYS')\n",
        "display_missing_values(girls, 'GIRLS')\n",
        "display_missing_values(videos, 'VIDEOS')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b3ltY5VnbK2B",
        "outputId": "99731fe1-fd73-410b-902f-eee0e0f808e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Missing Values in IDOLS ---\n",
            "               Missing Values  Percentage\n",
            "Other Group              1188   90.687023\n",
            "Birthplace                621   47.404580\n",
            "Group                      91    6.946565\n",
            "Full Name                   6    0.458015\n",
            "Korean Name                 6    0.458015\n",
            "K. Stage Name               1    0.076336\n",
            "\n",
            "\n",
            "\n",
            "--- Missing Values in BOYS ---\n",
            "              Missing Values  Percentage\n",
            "Short                    129   87.755102\n",
            "Fanclub Name              86   58.503401\n",
            "Company                    1    0.680272\n",
            "\n",
            "\n",
            "\n",
            "--- Missing Values in GIRLS ---\n",
            "              Missing Values  Percentage\n",
            "Short                    131   86.184211\n",
            "Fanclub Name             106   69.736842\n",
            "\n",
            "\n",
            "\n",
            "--- Missing Values in VIDEOS ---\n",
            "             Missing Values  Percentage\n",
            "Director               3145   83.377519\n",
            "Korean Name             986   26.139979\n",
            "Release                  13    0.344645\n",
            "Song Name                 1    0.026511\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> Handling Missing Values\n",
        "---\n",
        "\n",
        "<font color='#b86fa5'> Based on above results, the next decision was made:\n",
        "\n",
        "<font color='#b86fa5'> **1. Remove columns with more than 51% null values**:\n",
        "   \n",
        "   <font color='#b86fa5'> - We will drop columns that have more than 51% missing values, as they are unlikely to provide meaningful insights and may distort the analysis.\n",
        "   \n",
        "<font color='#b86fa5'> **2. Fill missing values for moderate missing data (20-50%)**:\n",
        "   \n",
        "   <font color='#b86fa5'> - For columns with between 20% and 50% missing values, we will impute the missing data using the mode (for categorical variables) or the median (for numerical variables).\n",
        "   \n",
        "<font color='#b86fa5'> **3. Leave low missing values (below 19%)**:\n",
        "   \n",
        "   <font color='#b86fa5'> - For columns with less than 19% missing values, we will leave them as they are (with null values), assuming that the impact of missing values will be minimal and won't distort the analysis.\n",
        "\n",
        "\n",
        "<font color='#b86fa5'> **->** *Let's implement these steps.*\n"
      ],
      "metadata": {
        "id": "kzlHsNU_fXtQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Remove columns with more than 51% missing values\n",
        "\n",
        "def remove_high_missing_columns(df, threshold=0.51):\n",
        "    missing_percent = df.isnull().mean()  # Calculate percentage of missing values\n",
        "    columns_to_drop = missing_percent[missing_percent > threshold].index\n",
        "    df.drop(columns=columns_to_drop, inplace=True)\n",
        "    print(f\"Removed columns with more than {threshold*100}% missing values: {list(columns_to_drop)}\")\n",
        "\n",
        "# Apply to each dataframe\n",
        "remove_high_missing_columns(idols)\n",
        "remove_high_missing_columns(boys)\n",
        "remove_high_missing_columns(girls)\n",
        "remove_high_missing_columns(videos)\n",
        "\n",
        "# Step 2: Fill in moderate missing values (20% - 50%) with mode or median\n",
        "\n",
        "def fill_in_moderate_missing_values(df):\n",
        "    for column in df.columns:\n",
        "        missing_percent = df[column].isnull().mean()  # Calculate percentage of missing values\n",
        "\n",
        "        if missing_percent >= 0.20 and missing_percent <= 0.50:\n",
        "            # If column is categorical, use mode for imputation\n",
        "            if df[column].dtype == 'object':\n",
        "                mode_value = df[column].mode()[0]\n",
        "                df[column] = df[column].fillna(mode_value)\n",
        "                print(f\"Imputed missing values in {column} with mode: {mode_value}\")\n",
        "            else:\n",
        "                # If column is numerical, use median for imputation\n",
        "                median_value = df[column].median()\n",
        "                df[column] = df[column].fillna(median_value)\n",
        "                print(f\"Imputed missing values in {column} with median: {median_value}\")\n",
        "\n",
        "# Apply to each dataframe\n",
        "fill_in_moderate_missing_values(idols)\n",
        "fill_in_moderate_missing_values(boys)\n",
        "fill_in_moderate_missing_values(girls)\n",
        "fill_in_moderate_missing_values(videos)\n",
        "\n",
        "# Step 3: Leave columns with less than 19% missing values as is (null values remain)\n",
        "# No further action required."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DNWuOZMHhTPa",
        "outputId": "05a113f2-49fc-48ac-e889-d370ab104298"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Removed columns with more than 51.0% missing values: ['Other Group']\n",
            "Removed columns with more than 51.0% missing values: ['Short', 'Fanclub Name']\n",
            "Removed columns with more than 51.0% missing values: ['Short', 'Fanclub Name']\n",
            "Removed columns with more than 51.0% missing values: ['Director']\n",
            "Imputed missing values in Birthplace with mode: Seoul\n",
            "Imputed missing values in Korean Name with mode: 거짓말\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Duplicated values**"
      ],
      "metadata": {
        "id": "1gRqWiLsZR44"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to check for duplicated values\n",
        "\n",
        "def check_duplicates(df, df_name):\n",
        "    print(f\"\\n--- Checking for Duplicates in {df_name} ---\")\n",
        "    duplicates = df[df.duplicated()]\n",
        "    print(f\"Total number of duplicates in {df_name}: {duplicates.shape[0]}\")\n",
        "    if duplicates.shape[0] > 0:\n",
        "        print(duplicates.head())  # Display the first few duplicate rows\n",
        "    else:\n",
        "        print(f\"No duplicates found in {df_name}\")\n",
        "\n",
        "# Check for duplicates in each dataframe\n",
        "check_duplicates(idols, \"IDOLS\")\n",
        "check_duplicates(boys, \"BOYS\")\n",
        "check_duplicates(girls, \"GIRLS\")\n",
        "check_duplicates(videos, \"VIDEOS\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZbF69209ZTfh",
        "outputId": "98a07d8a-1803-4188-daa6-1f9cac8122d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Checking for Duplicates in IDOLS ---\n",
            "Total number of duplicates in IDOLS: 0\n",
            "No duplicates found in IDOLS\n",
            "\n",
            "--- Checking for Duplicates in BOYS ---\n",
            "Total number of duplicates in BOYS: 0\n",
            "No duplicates found in BOYS\n",
            "\n",
            "--- Checking for Duplicates in GIRLS ---\n",
            "Total number of duplicates in GIRLS: 0\n",
            "No duplicates found in GIRLS\n",
            "\n",
            "--- Checking for Duplicates in VIDEOS ---\n",
            "Total number of duplicates in VIDEOS: 2\n",
            "            Date  Artist   Song Name Korean Name  \\\n",
            "504   2019-04-21  Target   Beautiful        아름다워   \n",
            "1610  2017-01-17    100%  How To Cry         거짓말   \n",
            "\n",
            "                             Video Type   Release  \n",
            "504   https://youtu.be/CdlqPQY7LIM  Boy     Major  \n",
            "1610  https://youtu.be/cjKtjg9Ia68  Boy  Japanese  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for all duplicates in the VIDEOS df\n",
        "duplicates_videos = videos[videos.duplicated(keep=False)]\n",
        "\n",
        "# Display all duplicate rows\n",
        "duplicates_videos\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qYrSSB4IlP2-",
        "outputId": "844689fb-384e-4521-a676-360f72c77242"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Date  Artist   Song Name Korean Name  \\\n",
              "503   2019-04-21  Target   Beautiful        아름다워   \n",
              "504   2019-04-21  Target   Beautiful        아름다워   \n",
              "1609  2017-01-17    100%  How To Cry         거짓말   \n",
              "1610  2017-01-17    100%  How To Cry         거짓말   \n",
              "\n",
              "                             Video Type   Release  \n",
              "503   https://youtu.be/CdlqPQY7LIM  Boy     Major  \n",
              "504   https://youtu.be/CdlqPQY7LIM  Boy     Major  \n",
              "1609  https://youtu.be/cjKtjg9Ia68  Boy  Japanese  \n",
              "1610  https://youtu.be/cjKtjg9Ia68  Boy  Japanese  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-44957ec4-4044-499d-b126-55a9590e1275\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Artist</th>\n",
              "      <th>Song Name</th>\n",
              "      <th>Korean Name</th>\n",
              "      <th>Video</th>\n",
              "      <th>Type</th>\n",
              "      <th>Release</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>503</th>\n",
              "      <td>2019-04-21</td>\n",
              "      <td>Target</td>\n",
              "      <td>Beautiful</td>\n",
              "      <td>아름다워</td>\n",
              "      <td>https://youtu.be/CdlqPQY7LIM</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>2019-04-21</td>\n",
              "      <td>Target</td>\n",
              "      <td>Beautiful</td>\n",
              "      <td>아름다워</td>\n",
              "      <td>https://youtu.be/CdlqPQY7LIM</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1609</th>\n",
              "      <td>2017-01-17</td>\n",
              "      <td>100%</td>\n",
              "      <td>How To Cry</td>\n",
              "      <td>거짓말</td>\n",
              "      <td>https://youtu.be/cjKtjg9Ia68</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Japanese</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1610</th>\n",
              "      <td>2017-01-17</td>\n",
              "      <td>100%</td>\n",
              "      <td>How To Cry</td>\n",
              "      <td>거짓말</td>\n",
              "      <td>https://youtu.be/cjKtjg9Ia68</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Japanese</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44957ec4-4044-499d-b126-55a9590e1275')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-44957ec4-4044-499d-b126-55a9590e1275 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-44957ec4-4044-499d-b126-55a9590e1275');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b5498bda-5a48-4aba-89fb-52562d0c5b6d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b5498bda-5a48-4aba-89fb-52562d0c5b6d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b5498bda-5a48-4aba-89fb-52562d0c5b6d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_249853b2-84f5-443e-b86d-1ce226637a88\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('duplicates_videos')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_249853b2-84f5-443e-b86d-1ce226637a88 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('duplicates_videos');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "duplicates_videos",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove duplicates directly from the VIDEOS df as the rows are identical\n",
        "videos.drop_duplicates(inplace=True)"
      ],
      "metadata": {
        "id": "KOsfpTESlY42"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Data format / Data types**"
      ],
      "metadata": {
        "id": "VbGbUACOmga5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color='#b86fa5'> To **standardize the data formats** across all dataframes (idols, boys, girls, and videos), we can follow the next steps:\n",
        "\n",
        "<font color='#b86fa5'> * **Step 1:** Check data types\n",
        "\n",
        "<font color='#b86fa5'> * **Step 2:** Standardize date formats\n",
        "\n",
        "<font color='#b86fa5'> * **Step 3:** Standardize text formats\n",
        "\n",
        "<font color='#b86fa5'> * **Step 4:** Remove whitespace from column names\n",
        "\n",
        "<font color='#b86fa5'> * **Step 5:** Additional formatting"
      ],
      "metadata": {
        "id": "yFrW4U29m2h_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Column names\n",
        "print(\"IDOLS columns:\", idols.columns)\n",
        "print(\"BOYS columns:\", boys.columns)\n",
        "print(\"GIRLS columns:\", girls.columns)\n",
        "print(\"VIDEOS columns:\", videos.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tveMnlXtmjJ0",
        "outputId": "5910872e-b620-44ad-d1a5-96a2bfc0e80d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "IDOLS columns: Index(['Stage Name', 'Full Name', 'Korean Name', 'K. Stage Name',\n",
            "       'Date of Birth', 'Group', 'Country', 'Birthplace', 'Gender'],\n",
            "      dtype='object')\n",
            "BOYS columns: Index(['Name', 'Korean Name', 'Debut', 'Company', 'Members', 'Orig. Memb.',\n",
            "       'Active'],\n",
            "      dtype='object')\n",
            "GIRLS columns: Index(['Name', 'Korean Name', 'Debut', 'Company', 'Members', 'Orig. Memb.',\n",
            "       'Active'],\n",
            "      dtype='object')\n",
            "VIDEOS columns: Index(['Date', 'Artist', 'Song Name', 'Korean Name', 'Video', 'Type',\n",
            "       'Release'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **Step 1: Check data types**"
      ],
      "metadata": {
        "id": "3_5G1MAPqTFF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check data types\n",
        "print(\"IDOLS data types:\", idols.dtypes)\n",
        "print(\"BOYS data types:\", boys.dtypes)\n",
        "print(\"GIRLS data types:\", girls.dtypes)\n",
        "print(\"VIDEOS data types:\", videos.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BYisLAX-oZKf",
        "outputId": "25d3c906-b51d-488b-c496-bca98f363496"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "IDOLS data types: Stage Name       object\n",
            "Full Name        object\n",
            "Korean Name      object\n",
            "K. Stage Name    object\n",
            "Date of Birth    object\n",
            "Group            object\n",
            "Country          object\n",
            "Birthplace       object\n",
            "Gender           object\n",
            "dtype: object\n",
            "BOYS data types: Name           object\n",
            "Korean Name    object\n",
            "Debut          object\n",
            "Company        object\n",
            "Members         int64\n",
            "Orig. Memb.     int64\n",
            "Active         object\n",
            "dtype: object\n",
            "GIRLS data types: Name           object\n",
            "Korean Name    object\n",
            "Debut          object\n",
            "Company        object\n",
            "Members         int64\n",
            "Orig. Memb.     int64\n",
            "Active         object\n",
            "dtype: object\n",
            "VIDEOS data types: Date           object\n",
            "Artist         object\n",
            "Song Name      object\n",
            "Korean Name    object\n",
            "Video          object\n",
            "Type           object\n",
            "Release        object\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **Step 2: Standardize date formats**"
      ],
      "metadata": {
        "id": "I9ycgOvtlMCs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting data types to date in the relevant columns\n",
        "idols['Date of Birth'] = pd.to_datetime(idols['Date of Birth'], errors='coerce')\n",
        "boys['Debut'] = pd.to_datetime(boys['Debut'], errors='coerce')\n",
        "girls['Debut'] = pd.to_datetime(girls['Debut'], errors='coerce')\n",
        "videos['Date'] = pd.to_datetime(videos['Date'], errors='coerce')\n",
        "\n",
        "# Display the data types to confirm standardization\n",
        "print(\"\\nIDOLS data types:\")\n",
        "print(idols.dtypes)\n",
        "print(\"\\nBOYS data types:\")\n",
        "print(boys.dtypes)\n",
        "print(\"\\nGIRLS data types:\")\n",
        "print(girls.dtypes)\n",
        "print(\"\\nVIDEOS data types:\")\n",
        "print(videos.dtypes)\n",
        "\n",
        "# Display a sample of the data to ensure the date formats look correct\n",
        "print(\"\\nSample from IDOLS (Date of Birth):\")\n",
        "print(idols[['Stage Name', 'Date of Birth']].head())\n",
        "print(\"\\nSample from BOYS (Debut):\")\n",
        "print(boys[['Name', 'Debut']].head(3))\n",
        "print(\"\\nSample from GIRLS (Debut):\")\n",
        "print(girls[['Name', 'Debut']].head(3))\n",
        "print(\"\\nSample from VIDEOS (Date):\")\n",
        "print(videos[['Artist', 'Date']].head(3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lEkHCgjemmWJ",
        "outputId": "5627805b-e894-4706-d4cf-011f20a6e424"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "IDOLS data types:\n",
            "Stage Name               object\n",
            "Full Name                object\n",
            "Korean Name              object\n",
            "K. Stage Name            object\n",
            "Date of Birth    datetime64[ns]\n",
            "Group                    object\n",
            "Country                  object\n",
            "Birthplace               object\n",
            "Gender                   object\n",
            "dtype: object\n",
            "\n",
            "BOYS data types:\n",
            "Name                   object\n",
            "Korean Name            object\n",
            "Debut          datetime64[ns]\n",
            "Company                object\n",
            "Members                 int64\n",
            "Orig. Memb.             int64\n",
            "Active                 object\n",
            "dtype: object\n",
            "\n",
            "GIRLS data types:\n",
            "Name                   object\n",
            "Korean Name            object\n",
            "Debut          datetime64[ns]\n",
            "Company                object\n",
            "Members                 int64\n",
            "Orig. Memb.             int64\n",
            "Active                 object\n",
            "dtype: object\n",
            "\n",
            "VIDEOS data types:\n",
            "Date           datetime64[ns]\n",
            "Artist                 object\n",
            "Song Name              object\n",
            "Korean Name            object\n",
            "Video                  object\n",
            "Type                   object\n",
            "Release                object\n",
            "dtype: object\n",
            "\n",
            "Sample from IDOLS (Date of Birth):\n",
            "  Stage Name Date of Birth\n",
            "0        A.M    1996-12-31\n",
            "1        Ace    1992-08-28\n",
            "2       Aeji    1999-10-25\n",
            "3       AhIn    1999-09-27\n",
            "4       Ahra    2001-02-21\n",
            "\n",
            "Sample from BOYS (Debut):\n",
            "    Name      Debut\n",
            "0   100% 2012-09-18\n",
            "1    14U 2017-04-17\n",
            "2  1the9 2019-02-09\n",
            "\n",
            "Sample from GIRLS (Debut):\n",
            "       Name      Debut\n",
            "0  (G)I-DLE 2018-05-02\n",
            "1       15& 2012-10-05\n",
            "2     2EYES 2013-07-20\n",
            "\n",
            "Sample from VIDEOS (Date):\n",
            "      Artist       Date\n",
            "0    Agust D 2020-05-22\n",
            "1      Yubin 2020-05-21\n",
            "2  OnlyOneOf 2020-05-21\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **Step 3: Standardize text formats**"
      ],
      "metadata": {
        "id": "cOOk1yRunN6v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to standardize text columns\n",
        "\n",
        "def standardize_text_columns(df, text_columns):\n",
        "    for column in text_columns:\n",
        "        if column in df.columns:\n",
        "            df[column] = df[column].str.strip()  # Removes extra spaces at the beginning and end\n",
        "            df[column] = df[column].str.title()  # Converts text to title case (first letter uppercase, rest lowercase)\n",
        "    return df\n",
        "\n",
        "# Columns to standardize in each DataFrame\n",
        "## We will let the korean names untouched\n",
        "idols_text_columns = ['Stage Name', 'Full Name', 'Group', 'Country', 'Birthplace', 'Gender']\n",
        "boys_text_columns = ['Name', 'Company', 'Active']\n",
        "girls_text_columns = ['Name', 'Company', 'Active']\n",
        "videos_text_columns = ['Artist', 'Song Name', 'Type']\n",
        "\n",
        "# Apply standardization\n",
        "idols = standardize_text_columns(idols, idols_text_columns)\n",
        "boys = standardize_text_columns(boys, boys_text_columns)\n",
        "girls = standardize_text_columns(girls, girls_text_columns)\n",
        "videos = standardize_text_columns(videos, videos_text_columns)\n",
        "\n",
        "# Display sample data to verify standardization\n",
        "print(\"\\nSample from IDOLS:\")\n",
        "print(idols[idols_text_columns].head(3))\n",
        "print(\"\\nSample from BOYS:\")\n",
        "print(boys[boys_text_columns].head(3))\n",
        "print(\"\\nSample from GIRLS:\")\n",
        "print(girls[girls_text_columns].head(3))\n",
        "print(\"\\nSample from VIDEOS:\")\n",
        "print(videos[videos_text_columns].head(3))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lnJnttM4nTpA",
        "outputId": "17d46f5b-7b14-4c94-f40b-9b066ed34450"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Sample from IDOLS:\n",
            "  Stage Name      Full Name      Group      Country Birthplace Gender\n",
            "0        A.M  Seong Hyunwoo  Limitless  South Korea      Seoul      M\n",
            "1        Ace  Jang Wooyoung        Vav  South Korea      Seoul      M\n",
            "2       Aeji      Kwon Aeji    Hashtag  South Korea      Daegu      F\n",
            "\n",
            "Sample from BOYS:\n",
            "    Name    Company Active\n",
            "0   100%  Top Media    Yes\n",
            "1    14U         Bg    Yes\n",
            "2  1The9        Mbk    Yes\n",
            "\n",
            "Sample from GIRLS:\n",
            "       Name  Company Active\n",
            "0  (G)I-Dle     Cube    Yes\n",
            "1       15&      Jyp     No\n",
            "2     2Eyes  Sidushq     No\n",
            "\n",
            "Sample from VIDEOS:\n",
            "      Artist           Song Name       Type\n",
            "0    Agust D           Daechwita   Boy Solo\n",
            "1      Yubin      Yaya (Me Time)  Girl Solo\n",
            "2  Onlyoneof  Angel (Prod. Gray)        Boy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **Step 4: Remove whitespace from column names**"
      ],
      "metadata": {
        "id": "5NK0aPPEnuKK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove whitespace as a best practice in data handling\n",
        "\n",
        "idols.columns = idols.columns.str.strip().str.replace(\" \", \"_\")\n",
        "boys.columns = boys.columns.str.strip().str.replace(\" \", \"_\")\n",
        "girls.columns = girls.columns.str.strip().str.replace(\" \", \"_\")\n",
        "videos.columns = videos.columns.str.strip().str.replace(\" \", \"_\")\n",
        "\n",
        "# Display updated column names for verification\n",
        "print(\"Updated IDOLS columns:\", idols.columns)\n",
        "print(\"Updated BOYS columns:\", boys.columns)\n",
        "print(\"Updated GIRLS columns:\", girls.columns)\n",
        "print(\"Updated VIDEOS columns:\", videos.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PTE0iJRAnvtv",
        "outputId": "48bff876-4461-4ec9-db58-c7cfe0adde6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Updated IDOLS columns: Index(['Stage_Name', 'Full_Name', 'Korean_Name', 'K._Stage_Name',\n",
            "       'Date_of_Birth', 'Group', 'Country', 'Birthplace', 'Gender'],\n",
            "      dtype='object')\n",
            "Updated BOYS columns: Index(['Name', 'Korean_Name', 'Debut', 'Company', 'Members', 'Orig._Memb.',\n",
            "       'Active'],\n",
            "      dtype='object')\n",
            "Updated GIRLS columns: Index(['Name', 'Korean_Name', 'Debut', 'Company', 'Members', 'Orig._Memb.',\n",
            "       'Active'],\n",
            "      dtype='object')\n",
            "Updated VIDEOS columns: Index(['Date', 'Artist', 'Song_Name', 'Korean_Name', 'Video', 'Type',\n",
            "       'Release'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **Step 5: Additional formatting**"
      ],
      "metadata": {
        "id": "3xuKKeQF4JjA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Standardize categorical data by gender and active\n",
        "idols['Gender'] = idols['Gender'].replace({'M': 'Male', 'F': 'Female'})\n",
        "boys['Active'] = boys['Active'].replace({'yes': True, 'no': False})"
      ],
      "metadata": {
        "id": "zP5vSlAM4Nvx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#<font color='#b86fa5'> **4. EDA**"
      ],
      "metadata": {
        "id": "K1a4ppk45RyD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color='#b86fa5'> **Exploratory Data Analysis (EDA) Steps:**\n",
        "\n",
        "<font color='#b86fa5'> **1.** Data understanding\n",
        "\n",
        "<font color='#b86fa5'> **2.** Data preparation for analysis\n",
        "\n",
        "<font color='#b86fa5'> **3.** Univariate analysis\n",
        "\n",
        "<font color='#b86fa5'> **4.** Bivariate analysis\n",
        "\n",
        "<font color='#b86fa5'> **5.** Identify outliers\n",
        "\n",
        "<font color='#b86fa5'> **6.** Identify patterns & trends\n",
        "\n",
        "<font color='#b86fa5'> **7.** Key insights\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "TUjlfxfu6V5k"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Data understanding**"
      ],
      "metadata": {
        "id": "C61eLwaXkrvb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "idols.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "YsIi4xM8jWvX",
        "outputId": "e01c48ce-8490-4d7e-b649-94950759eb99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Stage_Name      Full_Name Korean_Name K._Stage_Name Date_of_Birth  \\\n",
              "0        A.M  Seong Hyunwoo         성현우           에이엠    1996-12-31   \n",
              "1        Ace  Jang Wooyoung         장우영           에이스    1992-08-28   \n",
              "\n",
              "       Group      Country Birthplace Gender  \n",
              "0  Limitless  South Korea      Seoul   Male  \n",
              "1        Vav  South Korea      Seoul   Male  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-94bf4952-7b4d-415c-a798-bb7c8a60b756\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stage_Name</th>\n",
              "      <th>Full_Name</th>\n",
              "      <th>Korean_Name</th>\n",
              "      <th>K._Stage_Name</th>\n",
              "      <th>Date_of_Birth</th>\n",
              "      <th>Group</th>\n",
              "      <th>Country</th>\n",
              "      <th>Birthplace</th>\n",
              "      <th>Gender</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A.M</td>\n",
              "      <td>Seong Hyunwoo</td>\n",
              "      <td>성현우</td>\n",
              "      <td>에이엠</td>\n",
              "      <td>1996-12-31</td>\n",
              "      <td>Limitless</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ace</td>\n",
              "      <td>Jang Wooyoung</td>\n",
              "      <td>장우영</td>\n",
              "      <td>에이스</td>\n",
              "      <td>1992-08-28</td>\n",
              "      <td>Vav</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-94bf4952-7b4d-415c-a798-bb7c8a60b756')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-94bf4952-7b4d-415c-a798-bb7c8a60b756 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-94bf4952-7b4d-415c-a798-bb7c8a60b756');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d88c8278-c534-45a7-8907-2dcee0944400\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d88c8278-c534-45a7-8907-2dcee0944400')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d88c8278-c534-45a7-8907-2dcee0944400 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "idols",
              "summary": "{\n  \"name\": \"idols\",\n  \"rows\": 1310,\n  \"fields\": [\n    {\n      \"column\": \"Stage_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"Sehyung\",\n          \"Sungjae\",\n          \"Jaeyoon\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Full_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1251,\n        \"samples\": [\n          \"Kang Mina\",\n          \"Choi Junhong\",\n          \"Jang Yuji\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Korean_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1241,\n        \"samples\": [\n          \"\\ubc15\\uc138\\uc5f0\",\n          \"\\ub9f9\\ucc44\\uc194\",\n          \"\\uc774\\uac00\\ud604\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K._Stage_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1082,\n        \"samples\": [\n          \"\\ubd04\",\n          \"\\uc9c4\\uc9c4\",\n          \"\\ub809\\uc2a4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date_of_Birth\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1977-12-31 00:00:00\",\n        \"max\": \"2005-08-22 00:00:00\",\n        \"num_unique_values\": 1181,\n        \"samples\": [\n          \"1995-09-02 00:00:00\",\n          \"1996-03-16 00:00:00\",\n          \"1988-02-22 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 207,\n        \"samples\": [\n          \"Astin\",\n          \"Redsquare\",\n          \"Fromis_9\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"Malaysia\",\n          \"Canada\",\n          \"South Korea\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birthplace\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"Vancouver\",\n          \"Yeongcheon\",\n          \"Osan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "boys.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "nL3kOgCajeiN",
        "outputId": "dd7ede53-9129-44a8-8760-1bc29748b9ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Name Korean_Name      Debut    Company  Members  Orig._Memb. Active\n",
              "0  100%        백퍼센트 2012-09-18  Top Media        4            7    Yes\n",
              "1   14U         원포유 2017-04-17         Bg       14           14    Yes"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-311b5b12-75b8-40fb-a88c-05a2d1f4f063\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Korean_Name</th>\n",
              "      <th>Debut</th>\n",
              "      <th>Company</th>\n",
              "      <th>Members</th>\n",
              "      <th>Orig._Memb.</th>\n",
              "      <th>Active</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100%</td>\n",
              "      <td>백퍼센트</td>\n",
              "      <td>2012-09-18</td>\n",
              "      <td>Top Media</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14U</td>\n",
              "      <td>원포유</td>\n",
              "      <td>2017-04-17</td>\n",
              "      <td>Bg</td>\n",
              "      <td>14</td>\n",
              "      <td>14</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-311b5b12-75b8-40fb-a88c-05a2d1f4f063')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-311b5b12-75b8-40fb-a88c-05a2d1f4f063 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-311b5b12-75b8-40fb-a88c-05a2d1f4f063');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a8345242-9955-463b-8350-7afc638a240c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a8345242-9955-463b-8350-7afc638a240c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a8345242-9955-463b-8350-7afc638a240c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "boys",
              "summary": "{\n  \"name\": \"boys\",\n  \"rows\": 147,\n  \"fields\": [\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"Trax\",\n          \"H.O.T\",\n          \"Vermuda\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Korean_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"\\ud2b8\\ub799\\uc2a4\",\n          \"\\uc5d0\\uc774\\uce58\\uc624\\ud2f0\",\n          \"\\ubc84\\ubba4\\ub2e4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1995-09-06 00:00:00\",\n        \"max\": \"2020-04-04 00:00:00\",\n        \"num_unique_values\": 143,\n        \"samples\": [\n          \"2010-07-09 00:00:00\",\n          \"2017-05-25 00:00:00\",\n          \"2019-01-21 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 110,\n        \"samples\": [\n          \"Rbw\",\n          \"Ds\",\n          \"Jyp, Big Hit\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Members\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          10,\n          13,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Orig._Memb.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2,\n          18,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Active\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Yes\",\n          \"No\",\n          \"Hiatus\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "girls.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "SUuGQbrYjsB2",
        "outputId": "b099f934-0c9d-414d-c059-675dc85e77fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Name Korean_Name      Debut Company  Members  Orig._Memb. Active\n",
              "0  (G)I-Dle     (여자)아이들 2018-05-02    Cube        6            6    Yes\n",
              "1       15&       피프틴앤드 2012-10-05     Jyp        2            2     No"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0fd7c5c8-bdb5-4eee-a20a-d357e5112f4d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Korean_Name</th>\n",
              "      <th>Debut</th>\n",
              "      <th>Company</th>\n",
              "      <th>Members</th>\n",
              "      <th>Orig._Memb.</th>\n",
              "      <th>Active</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(G)I-Dle</td>\n",
              "      <td>(여자)아이들</td>\n",
              "      <td>2018-05-02</td>\n",
              "      <td>Cube</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15&amp;</td>\n",
              "      <td>피프틴앤드</td>\n",
              "      <td>2012-10-05</td>\n",
              "      <td>Jyp</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0fd7c5c8-bdb5-4eee-a20a-d357e5112f4d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0fd7c5c8-bdb5-4eee-a20a-d357e5112f4d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0fd7c5c8-bdb5-4eee-a20a-d357e5112f4d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3657fc28-ae2b-4e1d-a9e5-9898b38e5386\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3657fc28-ae2b-4e1d-a9e5-9898b38e5386')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3657fc28-ae2b-4e1d-a9e5-9898b38e5386 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "girls",
              "summary": "{\n  \"name\": \"girls\",\n  \"rows\": 152,\n  \"fields\": [\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 152,\n        \"samples\": [\n          \"Girlkind\",\n          \"We Girls\",\n          \"Ladies' Code\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Korean_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 152,\n        \"samples\": [\n          \"\\uac78\\uce74\\uc778\\ub4dc\",\n          \"\\uc704\\uac78\\uc2a4\",\n          \"\\ub808\\uc774\\ub514\\uc2a4 \\ucf54\\ub4dc\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1997-07-05 00:00:00\",\n        \"max\": \"2020-02-04 00:00:00\",\n        \"num_unique_values\": 149,\n        \"samples\": [\n          \"2011-03-18 00:00:00\",\n          \"1997-07-05 00:00:00\",\n          \"2013-12-11 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 120,\n        \"samples\": [\n          \"Hunus\",\n          \"Stardom\",\n          \"Gh\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Members\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 13,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          8,\n          6,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Orig._Memb.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 12,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          10,\n          2,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Active\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Yes\",\n          \"No\",\n          \"Hiatus\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "videos.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "P31dSjOqjxTT",
        "outputId": "809d9f77-28fd-49a2-d4d8-59001213f163"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Date   Artist       Song_Name Korean_Name  \\\n",
              "0 2020-05-22  Agust D       Daechwita         대취타   \n",
              "1 2020-05-21    Yubin  Yaya (Me Time)          넵넵   \n",
              "\n",
              "                          Video       Type Release  \n",
              "0  https://youtu.be/qGjAWJ2zWWI   Boy Solo   Major  \n",
              "1  https://youtu.be/BJD0arHF_5c  Girl Solo   Major  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-77a7b032-800b-454d-81d3-0ac3644ffff8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Artist</th>\n",
              "      <th>Song_Name</th>\n",
              "      <th>Korean_Name</th>\n",
              "      <th>Video</th>\n",
              "      <th>Type</th>\n",
              "      <th>Release</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-05-22</td>\n",
              "      <td>Agust D</td>\n",
              "      <td>Daechwita</td>\n",
              "      <td>대취타</td>\n",
              "      <td>https://youtu.be/qGjAWJ2zWWI</td>\n",
              "      <td>Boy Solo</td>\n",
              "      <td>Major</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-05-21</td>\n",
              "      <td>Yubin</td>\n",
              "      <td>Yaya (Me Time)</td>\n",
              "      <td>넵넵</td>\n",
              "      <td>https://youtu.be/BJD0arHF_5c</td>\n",
              "      <td>Girl Solo</td>\n",
              "      <td>Major</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77a7b032-800b-454d-81d3-0ac3644ffff8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-77a7b032-800b-454d-81d3-0ac3644ffff8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-77a7b032-800b-454d-81d3-0ac3644ffff8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3bea3577-66ac-4d8b-aae6-7507353b04c7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3bea3577-66ac-4d8b-aae6-7507353b04c7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3bea3577-66ac-4d8b-aae6-7507353b04c7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "videos",
              "summary": "{\n  \"name\": \"videos\",\n  \"rows\": 3770,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1992-03-23 00:00:00\",\n        \"max\": \"2020-05-22 00:00:00\",\n        \"num_unique_values\": 2216,\n        \"samples\": [\n          \"2016-06-19 00:00:00\",\n          \"2019-06-25 00:00:00\",\n          \"2015-09-22 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Artist\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 805,\n        \"samples\": [\n          \"Girlkind Xjr\",\n          \"Orange Caramel\",\n          \"Twice\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Song_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3219,\n        \"samples\": [\n          \"Bae\",\n          \"Queen\",\n          \"Aalow Aalow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Korean_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2597,\n        \"samples\": [\n          \"\\uc2b9\\uc804\\uac00\",\n          \"\\uc3d8\\ub9ac \\ubc97 \\uc544\\uc774\",\n          \"\\uae4c\\ud0c8\\ub808\\ub098\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3765,\n        \"samples\": [\n          \"https://youtu.be/42A-rFdralM\",\n          \"https://youtu.be/aYYMDmhfMpk\",\n          \"https://youtu.be/M-ZBHqUlBPo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Boy Solo\",\n          \"Girl Solo\",\n          \"Special\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Japanese\",\n          \"English\",\n          \"Major\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check the shape of dataframes\n",
        "print(\"IDOLS Data Shape:\", idols.shape)\n",
        "print(\"BOYS Data Shape:\", boys.shape)\n",
        "print(\"GIRLS Data Shape:\", girls.shape)\n",
        "print(\"VIDEOS Data Shape:\", videos.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FFhmSel18PCZ",
        "outputId": "cab9a4d9-2fda-481b-dd78-4df3228163ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "IDOLS Data Shape: (1310, 9)\n",
            "BOYS Data Shape: (147, 7)\n",
            "GIRLS Data Shape: (152, 7)\n",
            "VIDEOS Data Shape: (3770, 7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values\n",
        "print(\"Missing Values in IDOLS:\", idols.isnull().sum())\n",
        "print(\"Missing Values in BOYS:\", boys.isnull().sum())\n",
        "print(\"Missing Values in GIRLS:\", girls.isnull().sum())\n",
        "print(\"Missing Values in VIDEOS:\", videos.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gUx1ADFf8zun",
        "outputId": "27ece5e4-735a-462a-97e5-6081930cc828"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing Values in IDOLS: Stage_Name        0\n",
            "Full_Name         6\n",
            "Korean_Name       6\n",
            "K._Stage_Name     1\n",
            "Date_of_Birth     0\n",
            "Group            91\n",
            "Country           0\n",
            "Birthplace        0\n",
            "Gender            0\n",
            "dtype: int64\n",
            "Missing Values in BOYS: Name           0\n",
            "Korean_Name    0\n",
            "Debut          0\n",
            "Company        1\n",
            "Members        0\n",
            "Orig._Memb.    0\n",
            "Active         0\n",
            "dtype: int64\n",
            "Missing Values in GIRLS: Name           0\n",
            "Korean_Name    0\n",
            "Debut          0\n",
            "Company        0\n",
            "Members        0\n",
            "Orig._Memb.    0\n",
            "Active         0\n",
            "dtype: int64\n",
            "Missing Values in VIDEOS: Date            0\n",
            "Artist          0\n",
            "Song_Name       1\n",
            "Korean_Name     0\n",
            "Video           0\n",
            "Type            0\n",
            "Release        13\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for unique values in each column\n",
        "print(\"IDOLS Unique Values:\\n\", idols.nunique())\n",
        "print(\"BOYS Unique Values:\\n\", boys.nunique())\n",
        "print(\"GIRLS Unique Values:\\n\", girls.nunique())\n",
        "print(\"VIDEOS Unique Values:\\n\", videos.nunique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ROW_j10G8-WY",
        "outputId": "9db02452-74aa-4a9e-a675-289e3014a522"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "IDOLS Unique Values:\n",
            " Stage_Name       1132\n",
            "Full_Name        1251\n",
            "Korean_Name      1241\n",
            "K._Stage_Name    1082\n",
            "Date_of_Birth    1181\n",
            "Group             207\n",
            "Country            12\n",
            "Birthplace        135\n",
            "Gender              2\n",
            "dtype: int64\n",
            "BOYS Unique Values:\n",
            " Name           147\n",
            "Korean_Name    147\n",
            "Debut          143\n",
            "Company        110\n",
            "Members         14\n",
            "Orig._Memb.     14\n",
            "Active           3\n",
            "dtype: int64\n",
            "GIRLS Unique Values:\n",
            " Name           152\n",
            "Korean_Name    152\n",
            "Debut          149\n",
            "Company        120\n",
            "Members         11\n",
            "Orig._Memb.     10\n",
            "Active           3\n",
            "dtype: int64\n",
            "VIDEOS Unique Values:\n",
            " Date           2216\n",
            "Artist          805\n",
            "Song_Name      3219\n",
            "Korean_Name    2597\n",
            "Video          3765\n",
            "Type              6\n",
            "Release           8\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Data preparation for analysis**"
      ],
      "metadata": {
        "id": "m3QRn98gArvt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Make copies of the dataframes to preserve the original data\n",
        "idols_1 = idols.copy()\n",
        "boys_1 = boys.copy()\n",
        "girls_1 = girls.copy()\n",
        "videos_1 = videos.copy()\n",
        "\n",
        "# Remove 'Korean Name' from all dataframes as we won’t use them in the analysis\n",
        "idols_1.drop(columns=['Korean_Name'], inplace=True, errors='ignore')\n",
        "boys_1.drop(columns=['Korean_Name'], inplace=True, errors='ignore')\n",
        "girls_1.drop(columns=['Korean_Name'], inplace=True, errors='ignore')\n",
        "videos_1.drop(columns=['Korean_Name'], inplace=True, errors='ignore')\n",
        "\n",
        "# Add a new column to identify whether the data is from boys or girls in the boys and girls dataframes\n",
        "boys_1['Group_Type'] = 'Boys'\n",
        "girls_1['Group_Type'] = 'Girls'\n",
        "\n",
        "# Remove 'K. Stage Name' from boys, girls, and idols dataframes as we won’t use them in the analysis\n",
        "boys_1.drop(columns=['K._Stage_Name'], inplace=True, errors='ignore')\n",
        "girls_1.drop(columns=['K._Stage_Name'], inplace=True, errors='ignore')\n",
        "idols_1.drop(columns=['K._Stage_Name'], inplace=True, errors='ignore')\n",
        "\n",
        "# Merge boys and girls dataframes\n",
        "groups_df = pd.concat([boys_1, girls_1], ignore_index=True)\n",
        "\n",
        "# Add new columns for month and year of birth in the idols dataframe\n",
        "idols_1['Birth_Month'] = pd.to_datetime(idols_1['Date_of_Birth']).dt.month\n",
        "idols_1['Birth_Year'] = pd.to_datetime(idols_1['Date_of_Birth']).dt.year\n",
        "\n",
        "# Add a new column for debut year in the groups dataframe\n",
        "groups_df['Debut_Month'] = pd.to_datetime(groups_df['Debut']).dt.month\n",
        "groups_df['Debut_Year'] = pd.to_datetime(groups_df['Debut']).dt.year\n",
        "\n",
        "# Add a new column for release year in the videos dataframe\n",
        "videos_1['Release_Month'] = pd.to_datetime(videos_1['Date']).dt.month\n",
        "videos_1['Release_Year'] = pd.to_datetime(videos_1['Date']).dt.year\n",
        "\n",
        "# Remove 'Date_of_Birth', 'Debut' and 'Date'\n",
        "idols_1.drop(columns=['Date_of_Birth'], inplace=True, errors='ignore')\n",
        "groups_df.drop(columns=['Debut'], inplace=True, errors='ignore')\n",
        "videos_1.drop(columns=['Date'], inplace=True, errors='ignore')"
      ],
      "metadata": {
        "id": "rCui5UO4cLOg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#new datasets\n",
        "display(idols_1.head(2))\n",
        "display(groups_df.head(2))\n",
        "display(videos_1.head(2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "erARexAVq5Pr",
        "outputId": "63e71dc3-807e-4d01-c270-5af0fb3d5199"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Stage_Name      Full_Name      Group      Country Birthplace Gender  \\\n",
              "0        A.M  Seong Hyunwoo  Limitless  South Korea      Seoul   Male   \n",
              "1        Ace  Jang Wooyoung        Vav  South Korea      Seoul   Male   \n",
              "\n",
              "   Birth_Month  Birth_Year  \n",
              "0           12        1996  \n",
              "1            8        1992  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-862cdfa2-692d-4a5e-b3e5-e86673394712\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stage_Name</th>\n",
              "      <th>Full_Name</th>\n",
              "      <th>Group</th>\n",
              "      <th>Country</th>\n",
              "      <th>Birthplace</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Birth_Month</th>\n",
              "      <th>Birth_Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A.M</td>\n",
              "      <td>Seong Hyunwoo</td>\n",
              "      <td>Limitless</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Male</td>\n",
              "      <td>12</td>\n",
              "      <td>1996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ace</td>\n",
              "      <td>Jang Wooyoung</td>\n",
              "      <td>Vav</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Male</td>\n",
              "      <td>8</td>\n",
              "      <td>1992</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-862cdfa2-692d-4a5e-b3e5-e86673394712')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-862cdfa2-692d-4a5e-b3e5-e86673394712 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-862cdfa2-692d-4a5e-b3e5-e86673394712');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fd4b8589-882b-4d88-975d-8c790a23657c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fd4b8589-882b-4d88-975d-8c790a23657c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fd4b8589-882b-4d88-975d-8c790a23657c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(videos_1\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Stage_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Ace\",\n          \"A.M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Full_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Jang Wooyoung\",\n          \"Seong Hyunwoo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Group\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Vav\",\n          \"Limitless\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"South Korea\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birthplace\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Seoul\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birth_Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birth_Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1992\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Name    Company  Members  Orig._Memb. Active Group_Type  Debut_Month  \\\n",
              "0  100%  Top Media        4            7    Yes       Boys            9   \n",
              "1   14U         Bg       14           14    Yes       Boys            4   \n",
              "\n",
              "   Debut_Year  \n",
              "0        2012  \n",
              "1        2017  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f8ccd27-4d25-43f3-a917-3fec6ea02158\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Company</th>\n",
              "      <th>Members</th>\n",
              "      <th>Orig._Memb.</th>\n",
              "      <th>Active</th>\n",
              "      <th>Group_Type</th>\n",
              "      <th>Debut_Month</th>\n",
              "      <th>Debut_Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100%</td>\n",
              "      <td>Top Media</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Boys</td>\n",
              "      <td>9</td>\n",
              "      <td>2012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14U</td>\n",
              "      <td>Bg</td>\n",
              "      <td>14</td>\n",
              "      <td>14</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Boys</td>\n",
              "      <td>4</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f8ccd27-4d25-43f3-a917-3fec6ea02158')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f8ccd27-4d25-43f3-a917-3fec6ea02158 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f8ccd27-4d25-43f3-a917-3fec6ea02158');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c4ee21cb-9fdb-4f02-aee2-2ff2eae5e759\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c4ee21cb-9fdb-4f02-aee2-2ff2eae5e759')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c4ee21cb-9fdb-4f02-aee2-2ff2eae5e759 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(videos_1\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"14U\",\n          \"100%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Bg\",\n          \"Top Media\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Members\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 4,\n        \"max\": 14,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          14,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Orig._Memb.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 7,\n        \"max\": 14,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          14,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Active\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Group_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Boys\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut_Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut_Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    Artist       Song_Name                         Video       Type Release  \\\n",
              "0  Agust D       Daechwita  https://youtu.be/qGjAWJ2zWWI   Boy Solo   Major   \n",
              "1    Yubin  Yaya (Me Time)  https://youtu.be/BJD0arHF_5c  Girl Solo   Major   \n",
              "\n",
              "   Release_Month  Release_Year  \n",
              "0              5          2020  \n",
              "1              5          2020  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-77ec98e3-033a-4dcb-bec7-0aa3aa5b7335\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Artist</th>\n",
              "      <th>Song_Name</th>\n",
              "      <th>Video</th>\n",
              "      <th>Type</th>\n",
              "      <th>Release</th>\n",
              "      <th>Release_Month</th>\n",
              "      <th>Release_Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Agust D</td>\n",
              "      <td>Daechwita</td>\n",
              "      <td>https://youtu.be/qGjAWJ2zWWI</td>\n",
              "      <td>Boy Solo</td>\n",
              "      <td>Major</td>\n",
              "      <td>5</td>\n",
              "      <td>2020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Yubin</td>\n",
              "      <td>Yaya (Me Time)</td>\n",
              "      <td>https://youtu.be/BJD0arHF_5c</td>\n",
              "      <td>Girl Solo</td>\n",
              "      <td>Major</td>\n",
              "      <td>5</td>\n",
              "      <td>2020</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77ec98e3-033a-4dcb-bec7-0aa3aa5b7335')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-77ec98e3-033a-4dcb-bec7-0aa3aa5b7335 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-77ec98e3-033a-4dcb-bec7-0aa3aa5b7335');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-749c4416-15cc-4f98-8c3b-cb933abea96c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-749c4416-15cc-4f98-8c3b-cb933abea96c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-749c4416-15cc-4f98-8c3b-cb933abea96c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(videos_1\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Artist\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yubin\",\n          \"Agust D\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Song_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yaya (Me Time)\",\n          \"Daechwita\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"https://youtu.be/BJD0arHF_5c\",\n          \"https://youtu.be/qGjAWJ2zWWI\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Girl Solo\",\n          \"Boy Solo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Major\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release_Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release_Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Descriptive Analysis**"
      ],
      "metadata": {
        "id": "ZOCdwKpStnOJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "idols_1.describe(include='all')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QkLMqkw7tsVx",
        "outputId": "b1e56966-1f58-405f-a5ec-b534dc35a186"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Stage_Name    Full_Name Group      Country Birthplace Gender  \\\n",
              "count        1310         1304  1219         1310       1310   1310   \n",
              "unique       1132         1251   207           12        135      2   \n",
              "top         Jisoo  Lee Minhyuk   Nct  South Korea      Seoul   Male   \n",
              "freq            4            3    18         1204        809    676   \n",
              "mean          NaN          NaN   NaN          NaN        NaN    NaN   \n",
              "std           NaN          NaN   NaN          NaN        NaN    NaN   \n",
              "min           NaN          NaN   NaN          NaN        NaN    NaN   \n",
              "25%           NaN          NaN   NaN          NaN        NaN    NaN   \n",
              "50%           NaN          NaN   NaN          NaN        NaN    NaN   \n",
              "75%           NaN          NaN   NaN          NaN        NaN    NaN   \n",
              "max           NaN          NaN   NaN          NaN        NaN    NaN   \n",
              "\n",
              "        Birth_Month   Birth_Year  \n",
              "count   1310.000000  1310.000000  \n",
              "unique          NaN          NaN  \n",
              "top             NaN          NaN  \n",
              "freq            NaN          NaN  \n",
              "mean       6.439695  1995.543511  \n",
              "std        3.565039     4.297833  \n",
              "min        1.000000  1977.000000  \n",
              "25%        3.000000  1993.000000  \n",
              "50%        7.000000  1996.000000  \n",
              "75%       10.000000  1999.000000  \n",
              "max       12.000000  2005.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fce23e51-17a0-43bf-bda4-97a50cc42e45\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stage_Name</th>\n",
              "      <th>Full_Name</th>\n",
              "      <th>Group</th>\n",
              "      <th>Country</th>\n",
              "      <th>Birthplace</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Birth_Month</th>\n",
              "      <th>Birth_Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1310</td>\n",
              "      <td>1304</td>\n",
              "      <td>1219</td>\n",
              "      <td>1310</td>\n",
              "      <td>1310</td>\n",
              "      <td>1310</td>\n",
              "      <td>1310.000000</td>\n",
              "      <td>1310.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>1132</td>\n",
              "      <td>1251</td>\n",
              "      <td>207</td>\n",
              "      <td>12</td>\n",
              "      <td>135</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Jisoo</td>\n",
              "      <td>Lee Minhyuk</td>\n",
              "      <td>Nct</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>18</td>\n",
              "      <td>1204</td>\n",
              "      <td>809</td>\n",
              "      <td>676</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.439695</td>\n",
              "      <td>1995.543511</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.565039</td>\n",
              "      <td>4.297833</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1977.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1993.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>1996.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1999.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>2005.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fce23e51-17a0-43bf-bda4-97a50cc42e45')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fce23e51-17a0-43bf-bda4-97a50cc42e45 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fce23e51-17a0-43bf-bda4-97a50cc42e45');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-97ff9720-7976-48a9-a3c7-d6c86239a68c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97ff9720-7976-48a9-a3c7-d6c86239a68c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-97ff9720-7976-48a9-a3c7-d6c86239a68c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"idols_1\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Stage_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1132,\n          \"4\",\n          \"1310\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Full_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1251,\n          \"3\",\n          \"1304\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          207,\n          \"18\",\n          \"1219\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          12,\n          \"1204\",\n          \"1310\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birthplace\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          135,\n          \"809\",\n          \"1310\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"676\",\n          \"1310\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birth_Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 460.9972812342309,\n        \"min\": 1.0,\n        \"max\": 1310.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.43969465648855,\n          7.0,\n          1310.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birth_Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 710.5992552752326,\n        \"min\": 4.297832865461444,\n        \"max\": 2005.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1995.5435114503816,\n          1996.0,\n          1310.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "idols_1.hist(figsize=(10, 8))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P1Yq84XEwAtN",
        "outputId": "a9ba9e70-ce0b-49d2-983f-1d531d4cd532"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: title={'center': 'Birth_Month'}>,\n",
              "        <Axes: title={'center': 'Birth_Year'}>]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "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qqp09OhR77VT33zzjSoqKnxCQnV1tc+RtEbhfs2k4PcWFxenqVOnasiQIYqNjdXbb7+tJ598Una7PejXWxl9+7Nhc7dZF3otPvroI0lnb35wrmXFxMTIbDaH/DULZW+S1K9fP82dO1dpaWk6deqUNm/erIULF6qmpsbv660ISRFUVVWlOXPmKCsrS5MnT450OUGxZs0afec739Gtt94a6VKCzuPxqK6uTo899pj3EP2gQYM0evRoPfPMM5o9e3aEK2yZv//97/rf//t/64c//KGuu+46nThxQk888YTuuusuPffcc23qxg3wtWnTJv3pT3/SsmXLdNlll0W6HLQjAwYM0DXXXKNHHnlEl19+uZKSkvTSSy/pb3/7myR59/qePHlSs2bNksfj0eOPP65u3bpp69atuv/++1VcXKyhQ4dGso0mgt3XyJEjfW7ikJ2drdjYWP3+97/X9OnTdemll7a63vLz8/XYY49pwYIFWrx4saKjo/XQQw+prq6u1e44C3ZvaWlpSktL8z4ePny4Lr30Uj3wwAPat2+fBg4cGPQe2uNnw0bh6G38+PE+j6+77jq53W6tWbNGkydPVnR0dLOXxel2EVJdXa1p06apR48eWrVq1UXPs20Ljhw5oieffFKzZs1STU2NqqurvddZ1dXV6ZtvvolwhS1jsVjUo0cPn3OYe/ToobS0NFVUVESwsuB48MEHNWzYMM2fP1/Dhg3Tf/zHf2jdunXav3+//vrXv0a6vKCKj4+X9P/3qDWqrq72eb492LVrlxYtWqR7771X//mf/xnpctAOLVu2TJdccokmTpyoYcOG6dlnn9W9994r6ewRFEl68cUXtW/fPq1du1ZjxozR8OHDtWTJEg0ePFiPPvqod1kWi6XJ36V0dm9yuP8ug9nXueTm5urMmTM6cOBAyHv5tub01qNHDz366KM6ePCgxowZo1GjRunLL7/ULbfc4h0jnX3NznW770i8ZlJwezuXxmtnjEcvguV8nw2bu81qzmvReDTm28s6ffq0XC5XyF6zcPR2Prm5uaqpqdG//vUvv2rmSFIEnDx5Unfffbdqamr0xz/+8ZyHD9uizz//XG63W3fddVeT5yZPnqxBgwYFfF5oa9C/f//z/oGdOnUqzNUE36FDh3TDDTf4TLvssst0ySWX+P3G0to1nov97XPp7Xa7oqOjA7tVaCv0wQcfaPbs2brlllva/JFOtF6JiYnatGmTPv/8c508eVJWq1UbNmxQr1691LdvX0lSRUWFevfu3eQi7tTUVP3lL3/xPj7X9QU1NTX68ssvw349XTD7am2a05t09gjYG2+8ocrKSsXExCgxMVF33XWXz22ZbTabDh486LN8j8cjh8Phc5F9uASzt3C60GfD5m6zbDabysvL5fF4fK7dcTgcGjBggKSzN/a5/PLLm/ydORwOeTyekPydhau3YGv7hy/amPr6ehUUFMhut2v9+vUh+Y6ESElNTdXTTz/t898vfvELSdKSJUv0q1/9KsIVtsz111+vEydO+Oz1+/rrr/Xxxx97v3uhLevTp4/279/vM+3IkSP6+uuvfTYs7UFiYqKSkpK0detWn+mlpaUaPnz4OS/obWsqKip09913a9iwYVqyZEmky0EHkJCQoP79+8vtduvFF1/UhAkTvM/16dNHVVVVOn78uM88H3/8sc/7S05Ojt566y3vXmTp7M2AoqKiIvKBWwpOX+dSWlqqTp06+ZzOFW4X6q1Rp06dlJycrMTERB06dEhvvfWWz7icnBz985//VGVlpXdaeXm5Tpw4EdG7wQajt3PZsmWLJCk9PT1otV7ss2Fzt1k5OTlyOp0+X57rcDi0f/9+5eTkeKfl5ORo+/btcrvdPsuyWCw+19K1xd7OpbG3fv36+VU7R5LCbMmSJdq5c6fmz5+v2tpa78WE0tlzX9vyhzOLxaKsrKxzPnfllVe2+SAxZswYpaena9asWZozZ45iY2O1bt06xcTE6L/+678iXV6LTZw4UUVFRXrwwQc1evRonThxwnuN2bdvzdnauVwu761njxw5otraWu8b8NChQ9WzZ0/NnDlTc+fOVb9+/ZSVlaXS0lLt27dPzzzzTCRLb5aL9efxeDRlyhTFxsbqjjvu8DktpHv37urfv39E6kbb05y/pWeeeUbdu3fX5ZdfriNHjmjDhg2KjY3VtGnTvMv5/ve/r7Vr12ratGm66667vNfuvP3223r44Ye94yZOnKiNGzfq5z//ue6++24dPXpUDz/8sCZOnBjUnYrh7mvKlCnKyspSSkqKJGn79u3605/+pMmTJ1/09K5I9SadveFLRkaGunfvrk8++URr1qzRLbfcouHDh3vH3HTTTVq7dq1mzpyp++67Ty6XSw8//LCuu+66oF+zE+7e5s6dqyuuuEJpaWneGzc89dRT3s8DwdKcz4bN2WZlZmYqOztbCxYs0Lx58xQbG6vly5crJSVFY8eO9Y6bMmWKNm/erPvvv18/+tGPdPDgQZWUlGjOnDlB/xwa7t5+8IMf6JZbbpHNZtPJkye1efNmbdu2TQsWLPDreiRJMnna2hegtHGjR4/WkSNHzvnc9u3bfe7G0h688847mjx5sl588cWgvqFEyvHjx7V06VLt3LlTbrdb11xzjX7xi1+0iw+dHo9Hf/jDH/T888/r8OHD6tatmzIyMjRnzhwlJydHujy/fP75501OHWz09NNPe8P8Cy+8oOLiYn3xxReyWq267777dP3114ez1IBcrD9J570odujQodq4cWPIakP70py/pSeffFLPPfecqqqq1KNHD40dO1azZ89ucp3Axx9/rBUrVujjjz/WyZMnlZSUpDvuuKPJhdaHDh3Sr3/9a+3du1fdunXT+PHjg/7hLdx9Pfjgg3rzzTdVVVWlhoYGJSUlacKECZo0aVKTWxq3pt7uv/9+vf3223I6nUpISNDtt9+uyZMnN7lxw9GjR/Xggw9q9+7d6ty5s2688UYtWLAg6He5DXdva9eu1ebNm3XkyBG53W717dtX3//+93XXXXcF9fexuZ8Nm7PNqqmp0dKlS/U///M/qq+vV3Z2tgoLC5vsZPj73/+uZcuW6cCBA+rZs6d+/OMfa9q0aUH/fQx3bwUFBdq3b5/+/e9/y2QyacCAAZo0aZJuvvlmv2snJAEAAACAAdckAQAAAIABIQkAAAAADAhJAAAAAGBASAIAAAAAA0ISAAAAABgQkgAAAADAgJAEAAAAAAaEJAAAAAAwICQBAAAAgAEhCQAAAAAMCEkAAAAAYPB/AfOoETDlnADXAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "groups_df.describe(include='all')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zHMAM6Oft-lN",
        "outputId": "5562227a-c3fb-4bdf-f28d-d657297048be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Name Company     Members  Orig._Memb. Active Group_Type  Debut_Month  \\\n",
              "count    299     298  299.000000   299.000000    299        299   299.000000   \n",
              "unique   299     193         NaN          NaN      3          2          NaN   \n",
              "top     100%      Sm         NaN          NaN    Yes      Girls          NaN   \n",
              "freq       1      12         NaN          NaN    198        152          NaN   \n",
              "mean     NaN     NaN    5.494983     5.876254    NaN        NaN     6.404682   \n",
              "std      NaN     NaN    2.269393     2.301460    NaN        NaN     3.180284   \n",
              "min      NaN     NaN    2.000000     2.000000    NaN        NaN     1.000000   \n",
              "25%      NaN     NaN    4.000000     4.000000    NaN        NaN     4.000000   \n",
              "50%      NaN     NaN    5.000000     5.000000    NaN        NaN     7.000000   \n",
              "75%      NaN     NaN    6.500000     7.000000    NaN        NaN     9.000000   \n",
              "max      NaN     NaN   18.000000    18.000000    NaN        NaN    12.000000   \n",
              "\n",
              "         Debut_Year  \n",
              "count    299.000000  \n",
              "unique          NaN  \n",
              "top             NaN  \n",
              "freq            NaN  \n",
              "mean    2014.000000  \n",
              "std        4.596468  \n",
              "min     1995.000000  \n",
              "25%     2012.000000  \n",
              "50%     2015.000000  \n",
              "75%     2017.000000  \n",
              "max     2020.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-683a25f4-5cf4-4fb6-8e42-2eae715df433\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Company</th>\n",
              "      <th>Members</th>\n",
              "      <th>Orig._Memb.</th>\n",
              "      <th>Active</th>\n",
              "      <th>Group_Type</th>\n",
              "      <th>Debut_Month</th>\n",
              "      <th>Debut_Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>299</td>\n",
              "      <td>298</td>\n",
              "      <td>299.000000</td>\n",
              "      <td>299.000000</td>\n",
              "      <td>299</td>\n",
              "      <td>299</td>\n",
              "      <td>299.000000</td>\n",
              "      <td>299.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>299</td>\n",
              "      <td>193</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>100%</td>\n",
              "      <td>Sm</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Girls</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>198</td>\n",
              "      <td>152</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.494983</td>\n",
              "      <td>5.876254</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.404682</td>\n",
              "      <td>2014.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.269393</td>\n",
              "      <td>2.301460</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.180284</td>\n",
              "      <td>4.596468</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1995.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2012.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>2015.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.500000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>2017.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>2020.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-683a25f4-5cf4-4fb6-8e42-2eae715df433')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-683a25f4-5cf4-4fb6-8e42-2eae715df433 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-683a25f4-5cf4-4fb6-8e42-2eae715df433');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-12f8bbff-c130-46d6-bd19-134377ea2cb9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-12f8bbff-c130-46d6-bd19-134377ea2cb9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-12f8bbff-c130-46d6-bd19-134377ea2cb9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"groups_df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"299\",\n          \"100%\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          193,\n          \"12\",\n          \"298\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Members\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 103.65084391766749,\n        \"min\": 2.0,\n        \"max\": 299.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.494983277591973,\n          5.0,\n          299.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Orig._Memb.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 103.60464632298597,\n        \"min\": 2.0,\n        \"max\": 299.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.8762541806020065,\n          5.0,\n          299.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Active\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"198\",\n          \"299\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Group_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"152\",\n          \"299\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut_Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 103.61887446303103,\n        \"min\": 1.0,\n        \"max\": 299.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.404682274247492,\n          7.0,\n          299.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut_Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 864.8025052403083,\n        \"min\": 4.596467858967741,\n        \"max\": 2020.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2014.0,\n          2015.0,\n          299.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "groups_df.hist(figsize=(10, 8))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "381Xwi6RwEnW",
        "outputId": "16f47da2-d64b-4292-d501-62fba6f59adf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: title={'center': 'Members'}>,\n",
              "        <Axes: title={'center': 'Orig._Memb.'}>],\n",
              "       [<Axes: title={'center': 'Debut_Month'}>,\n",
              "        <Axes: title={'center': 'Debut_Year'}>]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "videos_1.describe(include='all')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eSIMVoRwt5tj",
        "outputId": "3a26f942-07ac-4f95-e532-054a06d94b6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Artist Song_Name                         Video  Type Release  \\\n",
              "count       3770      3769                          3770  3770    3757   \n",
              "unique       805      3219                          3765     6       8   \n",
              "top     Ftisland     Hello  https://youtu.be/CfuSB5iY02M   Boy   Major   \n",
              "freq          57        12                             2  1968    2786   \n",
              "mean         NaN       NaN                           NaN   NaN     NaN   \n",
              "std          NaN       NaN                           NaN   NaN     NaN   \n",
              "min          NaN       NaN                           NaN   NaN     NaN   \n",
              "25%          NaN       NaN                           NaN   NaN     NaN   \n",
              "50%          NaN       NaN                           NaN   NaN     NaN   \n",
              "75%          NaN       NaN                           NaN   NaN     NaN   \n",
              "max          NaN       NaN                           NaN   NaN     NaN   \n",
              "\n",
              "        Release_Month  Release_Year  \n",
              "count     3770.000000   3770.000000  \n",
              "unique            NaN           NaN  \n",
              "top               NaN           NaN  \n",
              "freq              NaN           NaN  \n",
              "mean         6.368700   2014.970557  \n",
              "std          3.377524      3.959457  \n",
              "min          1.000000   1992.000000  \n",
              "25%          4.000000   2013.000000  \n",
              "50%          6.000000   2016.000000  \n",
              "75%          9.000000   2018.000000  \n",
              "max         12.000000   2020.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6ca703a5-d4ac-4890-b0f1-559cf71e7a6f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Artist</th>\n",
              "      <th>Song_Name</th>\n",
              "      <th>Video</th>\n",
              "      <th>Type</th>\n",
              "      <th>Release</th>\n",
              "      <th>Release_Month</th>\n",
              "      <th>Release_Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3770</td>\n",
              "      <td>3769</td>\n",
              "      <td>3770</td>\n",
              "      <td>3770</td>\n",
              "      <td>3757</td>\n",
              "      <td>3770.000000</td>\n",
              "      <td>3770.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>805</td>\n",
              "      <td>3219</td>\n",
              "      <td>3765</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Ftisland</td>\n",
              "      <td>Hello</td>\n",
              "      <td>https://youtu.be/CfuSB5iY02M</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>57</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>1968</td>\n",
              "      <td>2786</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.368700</td>\n",
              "      <td>2014.970557</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.377524</td>\n",
              "      <td>3.959457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1992.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2013.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>2016.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>2018.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>2020.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ca703a5-d4ac-4890-b0f1-559cf71e7a6f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6ca703a5-d4ac-4890-b0f1-559cf71e7a6f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6ca703a5-d4ac-4890-b0f1-559cf71e7a6f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-67ebbc99-9fc3-4ab1-a1d6-0a13cc55c904\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67ebbc99-9fc3-4ab1-a1d6-0a13cc55c904')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-67ebbc99-9fc3-4ab1-a1d6-0a13cc55c904 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"videos_1\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Artist\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          805,\n          \"57\",\n          \"3770\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Song_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3219,\n          \"12\",\n          \"3769\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3765,\n          \"2\",\n          \"3770\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6,\n          \"1968\",\n          \"3770\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          8,\n          \"2786\",\n          \"3757\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release_Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1330.7921275942367,\n        \"min\": 1.0,\n        \"max\": 3770.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.36870026525199,\n          6.0,\n          3770.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release_Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1008.2250534081076,\n        \"min\": 3.959456635788185,\n        \"max\": 3770.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2014.9705570291778,\n          2016.0,\n          3770.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "videos_1.hist(figsize=(10, 8))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jtd0MGATwKUt",
        "outputId": "c79e2aba-3080-424a-ad3c-e4017d83c2d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: title={'center': 'Release_Month'}>,\n",
              "        <Axes: title={'center': 'Release_Year'}>]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'>**FIRST HYPOTHESIS**\n",
        "\n",
        "<font color='#b86fa5'>**Birth Trends of Idols:** The majority of K-Pop idols were born between 1995 and 2000, with a noticeable concentration of birthdays in January and December.\n",
        "--\n",
        "\n",
        "<font color='#b86fa5'>**Group Composition:** K-Pop groups generally have a membership range between 2 and 18, with 5 members being the most common group size. There was a notable rise in group debuts around 2010, followed by a significant surge in 2015. The debut months appear to vary without a distinct pattern.\n",
        "--\n",
        "\n",
        "<font color='#b86fa5'>**Video Release Trends:** The most frequent video release months are January and December. There has been a marked increase in video releases since 2015, indicating a growing trend in K-Pop's global reach and production output.\n",
        "--\n",
        "\n"
      ],
      "metadata": {
        "id": "DKe6AbrelmEh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Univariate analysis**"
      ],
      "metadata": {
        "id": "6VuH99Fi8PYL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color='#b86fa5'> Examine each variable independently to understand distributions and identify anomalies."
      ],
      "metadata": {
        "id": "C4F-qM0g9iqq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **a) Idols data**"
      ],
      "metadata": {
        "id": "lx8lB3pfunaF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Distribution of Idols by Birth Year\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot the histogram with specified bin range and initial color\n",
        "hist = sns.histplot(idols_1['Birth_Year'], bins=range(1977, 2006), kde=False, color='skyblue')\n",
        "\n",
        "# Calculate value counts for Birth Year\n",
        "value_counts = idols_1['Birth_Year'].value_counts().sort_index()\n",
        "\n",
        "# Get the top 3 most frequent years\n",
        "top_3_counts = value_counts.nlargest(3)\n",
        "\n",
        "# Coloring the top 3 most frequent years\n",
        "for year, count in top_3_counts.items():\n",
        "    hist.patches[year - 1977].set_facecolor('pink')\n",
        "\n",
        "# Set the x-axis to show all years\n",
        "plt.xticks(range(1977, 2006), rotation=90)\n",
        "\n",
        "# Titles and labels\n",
        "plt.title('Distribution of Idols by Birth Year', fontsize=16)\n",
        "plt.xlabel('Birth Year', fontsize=14)\n",
        "plt.ylabel('Count', fontsize=14)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "78LLkuwI8365",
        "outputId": "7ae79378-9cb0-4880-8848-6add0b4d614d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the value counts for Birth Year and sort by count in descending order\n",
        "birth_year_counts = idols_1['Birth_Year'].value_counts().sort_values(ascending=False)\n",
        "\n",
        "# Display the counts\n",
        "print(birth_year_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dugr-0wCzbcU",
        "outputId": "1b53cb35-c4fd-473d-c6ab-8de73e32d21e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Birth_Year\n",
            "1996    116\n",
            "1999    116\n",
            "1995    111\n",
            "2000    111\n",
            "1997    106\n",
            "1994    105\n",
            "1998     97\n",
            "1993     83\n",
            "1991     74\n",
            "1992     74\n",
            "2001     65\n",
            "1990     59\n",
            "2002     40\n",
            "1989     38\n",
            "1988     27\n",
            "2003     24\n",
            "1987     16\n",
            "2004     14\n",
            "1986     13\n",
            "1984      4\n",
            "2005      4\n",
            "1985      4\n",
            "1983      3\n",
            "1981      3\n",
            "1980      1\n",
            "1977      1\n",
            "1982      1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Distribution of Idols by Birth Month\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Calculate value counts for Birth Month\n",
        "value_counts = idols_1['Birth_Month'].value_counts().sort_index()\n",
        "\n",
        "# Get the top 3 most frequent months\n",
        "top_3_months = value_counts.nlargest(3)\n",
        "\n",
        "# Plot the count plot with hue set to 'Birth_Month' and legend set to False\n",
        "ax = sns.countplot(x='Birth_Month', data=idols_1, hue='Birth_Month', palette='light:b', dodge=False, legend=False)\n",
        "\n",
        "# Change the color of the top 3 months to pink\n",
        "for p in ax.patches:\n",
        "    if int(p.get_x() + p.get_width() / 2) + 1 in top_3_months.index:  # Checking if the month is one of the top 3\n",
        "        p.set_facecolor('pink')\n",
        "\n",
        "# Titles and labels\n",
        "plt.title('Distribution of Idols by Birth Month', fontsize=16)\n",
        "plt.xlabel('Birth Month', fontsize=14)\n",
        "plt.ylabel('Count', fontsize=14)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TT7bLJYDFlOE",
        "outputId": "f4956896-7008-4511-92c6-2b3041365155"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gender Distribution\n",
        "plt.figure(figsize=(6, 6))\n",
        "idols_1['Gender'].value_counts().plot.pie(autopct='%1.1f%%', colors=['lightblue', 'pink'], startangle=140)\n",
        "plt.title('Gender Distribution of Idols')\n",
        "plt.ylabel('')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DD7tVfZB99t8",
        "outputId": "9c82707f-2503-467d-ecad-ff6046783532"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **b) Groups data**"
      ],
      "metadata": {
        "id": "8cKtwV-Lu3EI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Group Size Distribution\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(groups_df['Members'], bins=range(min(groups_df['Members']), max(groups_df['Members']) + 1), kde=True, color='skyblue')\n",
        "plt.title('Distribution of Group Sizes')\n",
        "plt.xlabel('Number of Members')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# Set x-ticks to show every integer value\n",
        "plt.xticks(range(min(groups_df['Members']), max(groups_df['Members']) + 1))\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "xBDV1wAJu7aF",
        "outputId": "099842c4-bb8f-47c9-8bc6-aa83e330e3f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Debut Year Distribution\n",
        "plt.figure(figsize=(10, 8))\n",
        "\n",
        "# Plot the histogram for debut years\n",
        "sns.histplot(groups_df['Debut_Year'], bins=range(min(groups_df['Debut_Year']), max(groups_df['Debut_Year']) + 1), kde=True, color='skyblue')\n",
        "\n",
        "# Calculate value counts for Debut Year\n",
        "debut_year_counts = groups_df['Debut_Year'].value_counts().sort_index()\n",
        "\n",
        "# Get the top 3 most frequent debut years\n",
        "top_3_debut_years = debut_year_counts.nlargest(3)\n",
        "\n",
        "# Labeling the top 3 most frequent debut years on the histogram\n",
        "for year, count in top_3_debut_years.items():\n",
        "    plt.annotate(f'{year}: {count}',\n",
        "                 xy=(year, count),\n",
        "                 xytext=(year - 0.4, count + 2),  # Adjusted text position to be centered\n",
        "                 fontsize=10, color='blue')\n",
        "\n",
        "# Titles and labels\n",
        "plt.title('Distribution of Debut Years', fontsize=16)\n",
        "plt.xlabel('Debut Year', fontsize=14)\n",
        "plt.ylabel('Count', fontsize=14)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 730
        },
        "id": "pXYvf2Ej_8p_",
        "outputId": "65389f01-76e1-4f63-c916-dc653528a20d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Group Type Distribution\n",
        "plt.figure(figsize=(6, 6))\n",
        "groups_df['Group_Type'].value_counts().plot.pie(autopct='%1.1f%%', colors=['pink', 'lightblue'], startangle=140)\n",
        "plt.title('Group Type Distribution')\n",
        "plt.ylabel('')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "prjjbTqDAyWc",
        "outputId": "426b1f97-4b90-45db-bf36-82e1371c322c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **c) Videos data**"
      ],
      "metadata": {
        "id": "3Mz_3bEau7rv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Release Year Distribution\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(videos_1['Release_Year'], bins=20, kde=True, color='purple')\n",
        "plt.title('Distribution of Video Release Years')\n",
        "plt.xlabel('Release Year')\n",
        "plt.ylabel('Count')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "3jIdrfUVu-lT",
        "outputId": "fe25608e-db4d-47b4-c569-b4d15ca5253e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate value counts for Release Year, sorted in descending order\n",
        "release_year_counts = videos_1['Release_Year'].value_counts().sort_values(ascending=False)\n",
        "print(release_year_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X1EHm-w-B_7X",
        "outputId": "0e67502f-25cc-440a-b60c-4cf359eefeca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Release_Year\n",
            "2018    502\n",
            "2019    502\n",
            "2017    469\n",
            "2016    375\n",
            "2015    318\n",
            "2014    311\n",
            "2013    274\n",
            "2012    245\n",
            "2011    170\n",
            "2020    167\n",
            "2010    108\n",
            "2009     85\n",
            "2008     72\n",
            "2007     46\n",
            "2004     29\n",
            "2006     28\n",
            "2005     21\n",
            "1999      9\n",
            "2003      6\n",
            "2001      5\n",
            "1995      5\n",
            "2000      4\n",
            "1998      4\n",
            "2002      3\n",
            "1997      3\n",
            "1996      3\n",
            "1994      2\n",
            "1993      2\n",
            "1992      2\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Release Month Distribution\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Calculate value counts for Release Month\n",
        "month_counts = videos_1['Release_Month'].value_counts().sort_index()\n",
        "\n",
        "# Get the top 3 most frequent months\n",
        "top_3_months = month_counts.nlargest(3).index\n",
        "\n",
        "# Plot the count plot for the Release Month with hue set to 'Release_Month' and legend set to False\n",
        "ax = sns.countplot(x='Release_Month', data=videos_1, hue='Release_Month', palette='light:b', dodge=False, legend=False)\n",
        "\n",
        "# Change the color of the top 3 months to purple\n",
        "for p in ax.patches:\n",
        "    if int(p.get_x() + p.get_width() / 2) + 1 in top_3_months:  # Checking if the month is one of the top 3\n",
        "        p.set_facecolor('purple')\n",
        "\n",
        "# Titles and labels\n",
        "plt.title('Distribution of Video Release Months', fontsize=16)\n",
        "plt.xlabel('Release Month', fontsize=14)\n",
        "plt.ylabel('Count', fontsize=14)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 576
        },
        "id": "oVizg4nGGKyM",
        "outputId": "2ac2e305-041f-46c7-b09d-98f0f4e2471f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Type Distribution\n",
        "plt.figure(figsize=(6, 6))\n",
        "palette = sns.color_palette(\"Blues\", n_colors=videos_1['Type'].nunique())\n",
        "\n",
        "# Plot the pie chart\n",
        "ax = videos_1['Type'].value_counts().plot.pie(autopct='%1.1f%%', colors=palette, startangle=140, pctdistance=0.85)\n",
        "\n",
        "# Titles and labels\n",
        "plt.title('Type Distribution of Videos')\n",
        "plt.ylabel('')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "xFr2Rra0GwW1",
        "outputId": "76e9ebe1-7628-4eba-e361-6fe982ba427c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Bivariate analysis**"
      ],
      "metadata": {
        "id": "31zz4wqx8SCY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **a) Idols data**"
      ],
      "metadata": {
        "id": "rI_yBCGnIgBz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Relationship between Birth Year and Gender\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.histplot(data=idols_1, x='Birth_Year', hue='Gender', multiple='stack', palette='Paired', bins=20)\n",
        "plt.title('Birth Year Distribution by Gender')\n",
        "plt.xlabel('Birth Year')\n",
        "plt.ylabel('Count')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "ZtGi6SeCK_y8",
        "outputId": "b12b17f9-9174-480a-c665-c3b4c9076db9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **b) Groups data**"
      ],
      "metadata": {
        "id": "i97vjfekIWGT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Relationship between Debut Year and Group Size\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Define a custom palette for 'Girls' and 'Boys'\n",
        "custom_palette = {'Girls': 'pink', 'Boys': 'skyblue'}\n",
        "\n",
        "sns.scatterplot(data=groups_df, x='Debut_Year', y='Members', hue='Group_Type', palette=custom_palette)\n",
        "plt.title('Debut Year vs Group Size')\n",
        "plt.xlabel('Debut Year')\n",
        "plt.ylabel('Number of Members')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "EotQFvR4LfFM",
        "outputId": "dc26d707-c002-4b08-e23f-2144ef217662"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+4AAAIsCAYAAABss/O1AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAsVdJREFUeJzs3Xl8FPX9x/HXzOyZm4QbEk7lEERRRKyI9VZEC1YFa22976tq1daztdXa2l89ioj1qFrvo1oFtVrFaq3WWgU13AQE5AokIdl7Z35/xESWHIaQnd2Q9/Px4KE739nJZzffnex7vjPfMRzHcRARERERERGRrGRmugARERERERERaZmCu4iIiIiIiEgWU3AXERERERERyWIK7iIiIiIiIiJZTMFdREREREREJIspuIuIiIiIiIhkMQV3ERERERERkSym4C4iIiIiIiKSxRTcRURERERERLKYgruIiHRpzz//PMOGDWPBggWZLkWEYcOGcffdd2e6DBERyTKeTBcgIiLybZ5//nmuvfbaxsc+n4/CwkKGDRvGpEmTmDZtGnl5eRmsMNXSpUuZO3cuU6dOpX///i2uF4/HmTZtGuFwmJdffplAIJDSvnr1aiZPnsykSZO466670l12xlVWVvLQQw8xb948Vq9eTSKRoHfv3uy7776ccMIJ7Lvvvpkusd0++ugjZs2axaJFi6iqqqKkpIThw4czefJkpkyZkunyREQkyym4i4hIp3HJJZfQv39/EokEmzZt4sMPP+TXv/41Dz/8MDNnzmT48OGZLhGoD+733HMP++23X6vB3ev18otf/IIZM2Ywc+ZMfvKTn6S0//KXv8Tr9XLdddelu+SMmz9/Pueccw51dXVMnjyZ6dOn4/P5WL16NW+88QbPP/88jz32GOPGjct0qTts7ty5XH755YwYMYLTTjuNwsJCVq9ezX/+8x+efvrplOA+f/58LMvKYLUiIpKNFNxFRKTTOOiggxg9enTj43PPPZf333+f8847jwsuuIA5c+Y0GbXOdnvvvTfTp0/nwQcfZMqUKey2224AvPbaa7z99tvceOON9OzZM+11hEIhcnJy0v5zmlNdXc0FF1yAx+Phr3/9K0OGDElpv+yyy3jllVfw+/2tbieTr6E199xzD0OHDuWpp57C5/OltFVWVqY8/rbXKCIiXZOucRcRkU5twoQJXHDBBaxZs4aXXnoppW3ZsmVccskl7LfffowePZpp06bx5ptvNrudSCTCDTfcwPjx4xk7diw//elPqa6uTlmnpeuPDznkEK655hqg/rT+Sy+9FIDTTjuNYcOGMWzYMD744IMWX8MVV1xBUVERN954I47jUFdXx69//Wv23ntvZsyYAcCnn37KmWeeyT777MOYMWM49dRT+e9//5uynTVr1nDTTTdx5JFHsueeezJ+/HguueQSVq9enbJew3X9H374ITfddBMTJkxg0qRJzda2adMmRo4cyT333NOkbfny5QwbNozHHnsMqD/1/5577uGII45g9OjRjB8/nhkzZvDee++1+NoBnnzySTZu3MjPfvazJqEdwDAMjj32WPbcc8/GZXfffTfDhg1j6dKlXHHFFYwbN45TTjkFgEQiwR//+EcOO+wwRo0axSGHHMLvf/97YrFYynbb8vvc9v36z3/+8619pDmrVq1i9OjRTUI7QElJSYs1rV69urH/NPdvW23pHyIi0nlpxF1ERDq9448/nt///ve8++67nHTSSQAsWbKEGTNm0KtXL84++2xycnKYO3cuF154IXfffTeHH354yjZ+8YtfUFBQwEUXXcSKFSt44oknWLt2LY8++iiGYbS5lnHjxvHDH/6QRx99lPPOO4/BgwcDNBtIG+Tn53Pddddx6aWX8swzz7B06VIqKyu5//77MQyD999/n7PPPptRo0Zx0UUXYRgGzz//PD/60Y94/PHHGwPtggUL+N///sfkyZPp3bs3a9as4YknnuC0007jlVdeIRgMpvzcm2++meLiYi688EJCoVCztXXv3p1x48Yxd+5cLrroopS2OXPmYFkWRx11FFA/snzfffdx4oknsueee1JbW8tnn33G559/zne+850WX/9bb71FIBBo8jtpi0svvZQBAwZw+eWX4zgOANdddx0vvPACRx55JKeffjrz58/nvvvuY9myZfzxj3/c4Z/RoL19pG/fvrz//vusW7eO3r17t/nnFRcXc/vtt6csSyQS3HrrrXi93sZlbe0fIiLSeSm4i4hIp9e7d2/y8/P58ssvG5f96le/ok+fPjz33HONI52nnHIKM2bM4He/+12TkOj1enn44YcbA1Hfvn357W9/yz/+8Q8OPfTQNtdSWlrKvvvuy6OPPsoBBxzA+PHj2/S8o446iu9+97vcfvvthEIhzjrrLHbffXccx+Gmm25i/Pjx/OlPf2oMiNOnT2fy5Mn84Q9/4MEHHwTg4IMPbgzRDb773e9y8skn89prr/G9730vpa2wsJCHH374W6+pPuaYY7jhhhtYvHgxu+++e+PyuXPnMm7cOLp37w7A22+/zaRJk/jlL3/ZptfcYPny5QwaNCgljALU1tamjJIHAoEmp8IPHz6cO+64o/HxwoULeeGFFzjxxBO55ZZbAPjBD35AcXExDz74IP/+97/Zf//9d6i+Bu3tI2effTY///nPOeywwxg7diz77LMP3/nOdxg7diym2fLJjzk5ORx//PEpy26++WZCoVDj73xH+oeIiHReOlVeRER2CTk5OdTV1QFQVVXFv//9b44++mhqa2vZvHkzmzdvZsuWLRx44IFUVFSwfv36lOeffPLJKcFxxowZeDwe5s2b59pruOGGG4jH4/Tu3ZsLLrgAgPLycioqKpgyZQpbtmxpfC2hUIgJEybwn//8B9u2AVKu74/H42zZsoWysjIKCgr44osvmvy8k046qU0ToR1++OF4PB7mzJnTuGzx4sUsXbqUY445pnFZQUEBS5YsoaKiYoded21tbbPXpv/0pz9lwoQJjf9+97vfNVln+vTpKY8bfl+nn356yvIzzjgjpb092ttHvv/97/OnP/2J8ePH8/HHHzNz5kx+8IMfcMQRR/Dxxx+3+ef/9a9/5fHHH+eqq65qPPiwI/1DREQ6L424i4jILiEUCjVeL7xq1Socx+HOO+/kzjvvbHb9yspKevXq1fh4wIABKe25ubn06NGDNWvWpK/o7fTt25eSkhJ22223xhDeEIKvvvrqFp+3detWCgsLiUQi3HfffTz//POsX7++8dTxhnW219qM99sqLi5m//33Z+7cuVx22WVA/WnyHo8n5cyFSy65hAsuuIAjjzyS3XffnQMPPJDjjz/+W2f7z83NbfZU/UsuuYRTTz0VaBrEW3oNa9aswTRNysrKUpb36NGDgoKCnfp97kwfmThxIhMnTiQcDvP5558zZ84cnnzySc477zzmzp3b5Fr37ZWXl3PjjTdy7LHHprwXO9I/RESk81JwFxGRTm/dunVs3bq1Maw1jDCeccYZTJw4sdnnbB/sdkYymeywbW2vIXz/9Kc/ZcSIEc2u0zBa/ctf/rLx2ua99tqL/Px8DMNIuf57Wzsyg/nkyZO59tprKS8vZ8SIEcydO5f999+f4uLixnXGjRvH3//+d958803ee+89nn32Wf785z9z8803c+KJJ7a47cGDB7Nw4ULi8XjKiHZbbu/X0mvYkXkJtpfO32cwGGTfffdl3333pVu3btxzzz288847TJ06tcXnVFdXc/HFFzNw4MDG0/8b7Ej/EBGRzkvBXUREOr0XX3wRgAMPPBCov84c6q9JPuCAA9q0jZUrV6Zc+1xXV8fGjRs56KCDGpcVFhZSU1OT8rxYLMbGjRtTlu1MaNxew2vJy8v71tfScB37tjOiR6PRZkfbd9Rhhx3GDTfc0Hi6fEVFBeeee26T9YqKijjhhBM44YQTqKur49RTT+Xuu+9uNbgffPDBfPLJJ/z9739POfW+Pfr164dt26xcuTJlQsBNmzZRU1NDv379Gpe19ffZoC19ZEeMGjUKoMWfB/UHoa688kq2bt3KQw891GSCwR3pHyIi0nnpGncREenU3n//fWbOnEn//v057rjjgPpbbO2333489dRTbNiwoclzNm/e3GTZU089RTweb3z8xBNPkEgkUkJZaWkpH330Ucrznn766SYjtA3hqiMC86hRoygrK+PBBx9svIZ/W9u+luauV3/00Uc7ZAS5oKCAAw88kLlz5/LKK6/g9Xo57LDDUtbZsmVLyuPc3FzKysqa3IZtezNmzKB79+7ceuutrFixokl7c2cLtKThtnZ//vOfU5Y/9NBDKe3Q9t9ng7b0kea8//77zS5vuDZ+0KBBLT73nnvu4d133+WOO+5oDOnb2pH+ISIinZdG3EVEpNN45513WL58Oclkkk2bNvHBBx/w3nvv0bdvX+69996U06ZvvPFGTjnlFKZMmcJJJ51EaWkpmzZt4pNPPmHdunVN7vkej8f58Y9/zNFHH82KFSt4/PHH2WeffVJmCz/xxBO58cYbufjiiznggANYuHAh7777Lt26dUvZ1ogRI7Asi/vvv5+tW7fi8/nYf//9v/U65uaYpsktt9zC2WefzbHHHsu0adPo1asX69ev54MPPiAvL49Zs2YB9SPXL774Inl5eQwdOpRPPvmEf/3rXxQVFe3wz23OMcccw1VXXcXjjz/OgQceSEFBQUr75MmT2W+//dhjjz0oKipiwYIFvPbaa43XqbekqKiIe+65h/POO4/jjz+eyZMnM2rUKLxeL1999RWvvvoqAH369PnWGocPH87UqVN56qmnqKmpYdy4cSxYsIAXXniBww47LGXEvK2/zwZt6SPNueCCC+jfvz/f/e53KS0tJRwO869//Yu33nqL0aNH893vfrfZ5y1atIiZM2cybtw4KisrG88saXD88cfvUP8QEZHOS8FdREQ6jbvuuguoPwW+qKiI3XffnZ/97GdMmzaNvLy8lHWHDh3Kc889xz333MMLL7xAVVUVxcXFjBw5kgsvvLDJtm+44Qb+9re/cddddxGPx5k8eTLXXXddymnvJ510EqtXr+bZZ5/ln//8J/vssw8PPfQQP/7xj1O21aNHD26++Wbuu+8+fv7zn5NMJnnkkUfaFdwBxo8fz1NPPcXMmTN57LHHCIVC9OjRgz333JOTTz65cb2f//znmKbJ3/72N6LRKGPHjuWhhx7irLPOatfP3d4hhxxCIBCgrq6u2VPaf/jDH/KPf/yD9957j1gsRt++fbnssss488wzv3Xbe++9Ny+//DIPPfQQ8+bNY86cOdi2Ta9evdhnn3345S9/yb777tumOm+55Rb69+/PCy+8wBtvvEH37t0599xzm9yHvq2/zwZt6SMt1fPmm28yd+5cNmzYgOM4lJaWct5553H22Wfj8TT/dayqqgrHcfjwww/58MMPm7Q33Cqurf1DREQ6L8PZkfPPRERERLqY559/nmuvvZZnn32W0aNHZ7ocERHpgnSNu4iIiIiIiEgWU3AXERERERERyWIK7iIiIiIiIiJZTNe4i4iIiIiIiGQxjbiLiIiIiIiIZDEFdxEREREREZEspvu4A//73/9wHAev15vpUkRERERERKQLiMfjGIbB3nvv/a3rasQdcByHznCpv+M4xGKxTlGrdE3qo9IZqJ9KtlMflWynPirZrrP00R3JoRpxh8aR9tGjR2e4ktaFQiHKy8sZOnQoOTk5mS5HpAn1UekM1E8l26mPSrZTH5Vs11n66IIFC9q8rkbcRURERERERLKYgruIiIiIiIhIFlNwFxEREREREcliCu4iIiIiIiIiWUzBXURERERERCSLaVZ5ERERERGRTiSZTBKPxzNdRtaKRqON/zXNzIxVe71eLMvqsO0puIuIiIiIiHQCjuOwbt06qqqqMl1KVrNtG4/Hw9q1azMW3AGKioro3bs3hmHs9LYU3EVERERERDqBhtDes2dPcnJyOiQQ7oqSySTRaBS/39+ho95t5TgOoVCIDRs2ANCnT5+d3qaCu4iIiIiISJZLJpONob2kpCTT5WS1ZDIJQCAQyEhwBwgGgwBs2LCBnj177nQdmpxOREREREQkyzVc056Tk5PhSqStGn5XHTEfgYK7iIiIiIhIJ6HT4zuPjvxdKbiLiIiIiIiIZDEFdxEREREREZEsllWT061cuZIHHniATz/9lCVLljB48GBefvnllHXC4TAzZ85kzpw5bNq0id69ezN16lTOOussPJ6sejkiIiIiIiKu+/LLL3nooYd47733WLduHQD9+vVj/PjxnHzyyQwfPjzDFbbP6tWrOfTQQ9u07ssvv8zgwYPTXJF7sirpLlmyhHnz5jFmzBhs28ZxnCbr/OIXv+D111/nJz/5CUOGDOGTTz7hrrvuIhwOc/nll2egahERERERkezw1ltvcfnll2NZFlOmTGH48OGYpsny5ct5/fXXeeKJJ3jzzTfp169fpkvdYcXFxdx+++0pyx566CHWrVvHtdde27jMtm26devmdnlplVXB/ZBDDuGwww4D4JprruGzzz5Labdtm7lz53LmmWfygx/8AID999+fFStW8Morryi4i4iIiIjs4mpiSTaEk3xVF6c4YNEv10uBz8TUpG2sWrWKn/zkJ/Tt25eHH36Ynj17prRfeeWVPP7445hmy1dMh0KhrJ25Picnh+OPPz5l2Zw5c6ipqUlZnkwmiUQibpeXVll1jXtrHQjqb2SfSCTIz89PWZ6fn9/s6LyIiIiIiOw6NkcSPLK4mmeX1/De+jB/W1nLgwurWBdKKA8Af/rTnwiFQtx6661NQjuAx+PhtNNOo0+fPkD9YOnee+/NqlWrOPvss9l777258sorgfoAf9tttzFp0iRGjRrFkUceyQMPPJDyPq9evZphw4bx/PPPN/lZw4YN4+677258fPfddzNs2DCWLVvGpZdeytixYxk/fjy33HIL0Wi0w96DU089lalTpzbbduSRR3LmmWem1P7AAw/w8MMP893vfpc999yTU089lcWLFzd57rJly7jkkkvYb7/9GD16NNOmTePNN9/ssLq/TVYF929jWRbTpk3jscceY/78+dTV1fGvf/2LF198kVNPPTXT5YmIiIiISJqEEjZ/W1lLbdxOWR6zHZ5dXsPW7ZZ3RW+99RYDBgxgzJgxbX5OIpHgzDPPpKSkhKuvvpojjjgCx3E4//zzefjhh5k4cSLXXnstgwYN4vbbb+fWW2/dqRovu+wyotEoV1xxBQcddBCPPvoo119//U5tc1vHH388ixYtYunSpSnL58+fT0VFBVOmTElZ/te//pVHHnmEU045hXPOOYclS5bwox/9iE2bNjWus2TJEk4++WSWLVvG2WefzTXXXENOTg4XXnghf//73zus9tZk1anybXHjjTdy4403cuKJJzYuO/fcczn99NN3aruO4xAKhXa2vLQKh8Mp/xXJNuqj0hmon0q2Ux+VbJepPlqHl69CiWbbQgmHmmgST6LjRm6zTTQaxbZtkskkyWSySXttbS0bNmzg0EMPbdJeU1OTsiwYDBIIBHAch1gsxhFHHMFPfvKTxva///3v/Pvf/+aSSy7hvPPOA2D69OlcdtllPPLII8yYMYOysjJsu/5gSUNd29t2ecO6/fr1449//GPjNnNzc3niiSf48Y9/zLBhw3b4fXEcB8dxGn/O4Ycfzi9/+UvmzJnDHnvs0bj8xRdfJBgMNr4/DfWsWrWKuXPn0qtXLwC+853vMH36dGbPns3VV18NwC233EKfPn14+umn8fl8AJx88smceuqp/Pa3v+WQQw5ptraGnxMOhxt/3va1t/Ve750uuP/ud7/j7bff5pZbbmHgwIF88skn/PGPf6SgoICzzjqr3duNx+OUl5d3YKXpU1FRkekSRFqlPiqdgfqpZDv1Ucl2bvfR7oNbD3W10Rgbv1zSbEDaVXg8nhZPK6+srATA7/c3ub77tNNOSzn9+7LLLuO0005rDLVTp05Nec5bb72FZVmceOKJKctPOeUUXn/9df7xj38wffr0xlri8Xiz15QnEonG5YlE/UGX73//+ynrfv/73+eJJ57gH//4BwMGDGj7m/G1ZDKJ4ziN2/R6vUyaNIlXX32Viy++GMMwSCaTzJ07l4MPPhjTNIlEIo21H3zwwRQWFjY+f/fdd2fUqFHMmzePSy+9lOrqaj744APOP//8xve4wfjx45k1axarVq1q9tKEaDRKIpFg+fLlLdbfcCDg23Sq4L548WIefPBB7r333sajGuPGjSORSHDnnXcyffp08vLy2rVtr9fL0KFDO7LcDhcOh6moqGDgwIEEg8FMlyPShPqodAbqp5Lt1Ecl22Wqj0YNLz4zSsxu/lr27rl+ctoxYttZRKNR1q5di9/vJxAINGkvLi5uXG/79ptvvpm6ujoqKyu5+uqr8Xg8BAIBLMvC4/EwYMCAlPnGNmzYQI8ePSgpKUnZzogRIwDYuHEjgUAAv98P1Gep5mpq+DkN/w+w2267paw7dOhQTNNk/fr1zW7j21iWhWEYKc+dOnUqr7/+Op999hnjxo3j3XffpbKykqlTpzau11D7oEGDmvzcwYMH8+qrrxIIBFi8eDGO4zBz5kxmzpzZbA21tbWUlZU12+bxeCgrK2v8edva/nT+1nSq4N7wwho6TIORI0cSi8VYv359u4O7YRhZO3vi9oLBYKepVbom9VHpDNRPJdupj0q2c7uP+m2Hg/rk8MaauiZto4v95HktAh6va/W4zTRNTNPEsiwsy2rSXlRURI8ePVi6dGmT9rFjxwL1E7I1bKsh8Pp8Przepu+bYRhNttPwuKGt4XHD9ho0jORvu7zhwMD26zZMdtfcz2sLwzCaPPfAAw+kpKSEl19+mf3335+XX36ZHj16cOCBB35rPQ3bbHi9Df9/xhlnMHHixGZrGDRoULO1W5aFaZqNlyY0V3tbdarJ6RruNfj555+nLP/ss88wDIO+fftmoiwREREREUkzyzTYo9jPsQPyKPDWx5igZTCpTw4H980l4OlU0SYtDj74YFauXMn8+fN3ajv9+vVjw4YN1NbWpixvOOW7IZcVFhYC9dfQb2vt2rUtbnvlypVNHtu2Tf/+/Xeq5m1ZlsVRRx3Fa6+9RnV1NW+88QaTJ09uNlxvXw/UXwbS8BpLS0uB+rMKDjjggGb/tXfweEdkVe8Oh8O8+uqrvPrqq6xZs4ba2trGx5s3b2bUqFGMGjWKG2+8kaeeeor333+f++67j9mzZ3PCCSfodDIRERERkV1Y0GMyqjjAD4cVct7Ibpw+vIjxvYLkerMq1mTMWWedRTAY5Gc/+1nKrOgN2nrLvIMOOohkMslf/vKXlOUPP/wwhmFw0EEHAZCXl0e3bt346KOPUtZ7/PHHW9z29tt87LHHGn9mR5o8eTI1NTXccMMNhEIhjjvuuGbXe+ONN1i/fn3j4/nz5/Ppp5821lNSUsJ+++3HU089xYYNG5o8f/PmzR1ad0uy6lT5yspKLr300pRlDY8feeSRxov/77zzTu677z4qKyvp3bs3Z511FmeffXYmShYREREREZfle3f8lOquYODAgfzud7/jiiuu4KijjmLKlCkMHz4cx3FYvXo1L7/8MqZp0rt371a3c8ghhzB+/Hj+7//+jzVr1jBs2DDee+893nzzTX70ox+lXM994oknMnv2bH7+858zatQoPvroI1asWNHitlevXs15553HxIkT+eSTT3jppZc49thjGT58eIe9DwDDhw9nt91249VXX2XIkCHsscceza5XVlbGjBkzmDFjBrFYjEceeYSioqKUic9vvPFGTjnlFKZMmcJJJ51EaWkpmzZt4pNPPmHdunW89NJLHVp7c7IquPfv359Fixa1uk6PHj245ZZbXKpIRERERESk8zjssMP429/+xoMPPsh7773Hc88913hZ8aRJk5gxY8a3hmTTNLn33nu56667mDNnDs8//zz9+vXjpz/9KWeccUbKuhdeeCGbN2/mtddeY+7cuRx00EH86U9/YsKECc1u+w9/+AN33nknd9xxBx6Ph1NPPZWf/vSnHfb6t3Xcccdxxx13cPzxx7e4zve+9z1M0+TPf/4zlZWV7Lnnnlx//fUps8QPHTqU5557jnvuuYcXXniBqqoqiouLGTlyJBdeeGFaat9eVgV3ERERERER2TllZWXcdNNN37rebbfdxm233dZsW25uLtdeey3XXnttq9sIBAL86le/4le/+lXK8pYGZLt168Zdd931rbW11X333ddim8/nwzAMpkyZ0uo2Tj/9dE4//fRW1yktLeU3v/lNu2rsCLoYRERERERERHYpjuPw3HPPMW7cuF1iEnONuIuIiIiIiEjGbd26lUgk0uo6PXr0aLU9FArxxhtv8K9//YvFixe3eO/1zkbBXURERERERDLuV7/6FS+88EKr63zbnGibN2/mqquuIj8/n3POOYdDDz20I0vMGAV3ERERERERSauLL76Yiy++uNV1zjrrrBZv29ZW/fv354svviASiRAIBFpd79sOAmQTBXcRERERERHJuKFDhzJ06NBMl5GVNDmdiIiIiIiISBZTcBcRERERERHJYgruIiIiIiIiIllMwV1EREREREQkiym4i4iIiIiIiGQxBXcRERERERGRLKbbwYmIiIiIiEhWufvuu7nnnnsaH/t8Pvr378+0adM488wzMc2uNQat4C4iIiIiIiJZJxAI8Oc//xmASCTCBx98wB133IHjOJxzzjkZrs5dCu4iIiIiIiKSdUzTZK+99mp8vP/++7N48WJef/31Lhfcu9b5BSIiIiIiItIm4YRNZSTB2ro4lZEE4YSd6ZLIzc0lkUg0Pq6qquLaa69l/Pjx7LnnnkyfPp2PPvqosf3RRx9lzJgx1NbWpmxn2bJlDBs2jHnz5gHw3//+lx/84Afss88+7L333kyZMoUXXnjBnRfVBgruIiIiIiIikqImluTFiq3cX17FI4urub+8ipcqtlITS7paRyKRIJFIUFtby5tvvsnrr7/OkUceCUAymeTss8/mrbfe4sorr+TOO+8kJyeHM888ky+++AKA4447DsdxePnll1O2++yzz9KrVy8OPPBAamtrOffcc8nLy+P3v/89M2fO5KSTTqKmpsbV19oanSovIiIiIiIijcIJmzmraqnYGk9ZvmJrnLmrajluYD5BT/rHgEOhEHvssUfKsmOOOabxNPm3336b+fPn86c//YmJEycCcOCBB3L44Yfz4IMPMnbsWAoLCznyyCN57rnnmD59OlB/MOCll17i+9//PpZlsWLFCrZu3cpPfvIThg0bBsCECRPS/vp2hEbcRUREREREpFEoYTcJ7Q1WbI0TcumU+UAgwLPPPsuzzz7L448/zs9//nP++c9/ct111wHw0UcfkZeX1xjaAbxeL4cffjiffPJJ47KTTjqJ+fPns2TJEgDmzZtHZWUlJ5xwAgBlZWXk5eVx0003MWfOHDZv3uzK69sRCu4iIiIiIiLSKJp0dqq9o5imyejRoxk9ejT77LMPp512GhdeeCHPP/88ixcvpqamhpKSkibPKykpSTnNfdy4cQwaNIhnn30WgOeee45x48ZRVlYGQGFhIQ899BC5ubn89Kc/5Tvf+Q4//OEPWbRokSuvsy0U3EVERERERKSR3zJ2qj2dBg8eDMDSpUspLCyksrKyyTqVlZUUFBSkLDvxxBN56aWXWLduHfPmzWscbW+w55578qc//YmPPvqIWbNmUVlZyYUXXpi+F7KDFNxFRERERESkUY7HZFC+t9m2Qflecly4vr0lDae7d+vWjX322Yfa2lrefffdxvZEIsEbb7yRchs5gKlTp7J161auvPJKAoEARx11VLPbDwQCTJo0iRkzZrB69Wqi0WjaXsuO0OR0IiIiIiIi0ijoMTm6LI+5q2pZsc217oPyvRxdlufKxHQAtm03Xqsej8f5/PPPuffeexk6dCj77rsvpmmy5557ctVVV3HFFVfQvXt3Hn30UTZu3Mjtt9+esq3i4mIOPfRQXn31VU4++WQCgUBj29tvv82zzz7LYYcdRt++fdm0aROPPfYYY8eOxe/3u/Jav42Cu4iIiIiIiKQo8FkcNzCfUMImmnTwWwY5HtO10A4QiUQ4+eSTAfB4PPTu3ZvjjjuOiy66CK+3/oyA2bNnc/vtt/Pb3/62cRb6P/3pT4wcObLJ9g4//HBeffVVvv/976csLysrwzRN/vCHP1BZWUlRUREHHnggP/nJT9L/IttIwV1ERERERESaCLoc1Ld18cUXc/HFF3/ret26dePWW29NWZZMJolEIk3Wfeedd9h9993Zc889U5YPHjyYu+66a+cKTjMFdxEREREREdllLVq0iPLycubMmcONN96Y6XLaRcFdREREREREdlnnn38+mzdv5nvf+16T2eQ7CwV3ERERERER2WX94x//yHQJO023gxMRERERERHJYgruIiIiIiIiIllMwV1EREREREQkiym4i4iIiIiIiGQxBXcRERERERGRLKbgLiIiIiIiIpLFFNxFREREREREspiCu4iIiIiIiGStefPmcfbZZ7P//vuzxx57cMABB3DOOefw8ssvY9s2AD/84Q8599xzv3Vbq1evZtiwYbz66qvpLrtDeTJdgIiIiIiIiEhzfv/733Pfffdx+OGHc8MNN9CjRw82bdrEG2+8wVVXXUVhYSETJ07kxhtvxDR33XFpBXcRERERERFpKp6AeBwSSfBY4PWC170I+fbbb3Pfffdx0UUXcfHFF6e0HX300fzoRz/C46mvZ+jQod+6vUgkkpY63bDrHpIQERERERGR9onE4Itl8J/P4X8L6/9bvrx+uUseeughevTowfnnn99s+5577snIkSOBpqfKz5o1i3322Yf58+dz8sknM3r0aP7yl780u50333yTadOmsffee7Pvvvsybdo05s2b1/EvaCdoxF1ERERERES+EU/AohVQtTV1+ZYaWFwBIwanfeQ9kUjw8ccfc+SRRzaOqu+oeDzOFVdcwY9//GMuv/xyioqKmqyzatUqLr30UiZPnswVV1yBbdssXLiQ6urqnXwFHSurgvvKlSt54IEH+PTTT1myZAmDBw/m5ZdfbrJeTU0Nd911F6+++irV1dX06tWLU045hTPOOCMDVYuIiIiIiOxC4vGmob3Blpr69jQH96qqKmKxGH369ElZ7jgOyWSy8bFpmi1e255IJLj88ss55phjGpetXr06ZZ0vvviCeDzO9ddfT15eHgATJ07sqJfRYbIquC9ZsoR58+YxZswYbNvGcZwm64RCIX74wx9iWRY/+9nPKCkpoaKigtra2gxULCIiIiIisotJJHeuvQMZhpHy+LXXXuPSSy9tfPyDH/yAG264ocXnT5o0qdXtDxs2DMuyuPLKKznppJMYN24c+fn5O1d0GmRVcD/kkEM47LDDALjmmmv47LPPmqwze/Zs6urqeOmll8jJyQFg/PjxrtYpIiIiIiKyy/JYO9feAYqKivD5fKxbty5l+YQJE3j22WcBWrz2vUEwGCQ3N7fVdQYNGsSsWbMaJ8EzTZMDDzyQG264gb59++7ci+hAWTU5XVum73/22Wc54YQTGkO7iIiIiIiIdCCvF7oVNN/WraC+Pc08Hg9jx47l/fffTzk1vrCwkNGjRzN69Gh8Pl+H/KyDDjqIv/zlL3z44YfcfvvtfP7551x77bUdsu2OklXB/dusXr2ajRs30q1bN8477zxGjRrFfvvtx3XXXUddXV2myxMREREREen8vB7YfWDT8N6toH65S7eEO/3009mwYQOzZs1y5efl5eVxzDHHMHnyZJYtW+bKz2yrrDpV/tts2rQJgN/85jccccQR3H///VRUVHDHHXcQCoX4/e9/3+5tO45DKBTqqFLTIhwOp/xXJNuoj0pnoH4q2U59VLKd+mhmRKNRbNsmmUymjECnjdfCGD4QI56EZBIsC8dr4VhW/WMXTJw4kbPOOou77rqL8vJyjjrqKHr06EFtbS3//e9/2bhxI8FgkGQyieM4jRPXbTtX2vbvlW3bjf9NJpM89dRTfPrppxx44IH06NGD1atX89JLL3HAAQfs9PucTCaxbZtwONz4c7flOE6Ta/hb0qmCe8OLHTRoEL/5zW+A+mscPB4P1113HZdffjmlpaXt2nY8Hqe8vLzDak2nioqKTJcg0ir1UekM1E8l26mPSrZTH3Wfx+MhGo26/4MtA7AhbtfPKO+iCy64gNGjR/P000/zy1/+ktraWgoKChgxYgQ33ngjRx55JJFIpDGIRyKRlOdv/7jh/YvH40QiEQYOHMibb77JbbfdRnV1NSUlJRxxxBFccMEFTZ67o6LRKIlEguXLl7e4TltP9+9Uwb2wsBBoOhnd/vvvD9TPSt/e4O71ehk6dOjOFZhm4XCYiooKBg4cSDAYzHQ5Ik2oj0pnoH4q2U59VLKd+mhmRKNR1q5di9/vJxAIZLocVx1++OEcfvjhra7z6KOPNv6/4zicd955XHrppU1GtAcPHswXX3zR+Hj8+PFpnezc4/FQVlaG3+9v0rZ06dK2b6cji0q30tLSVo9I7MzRJ8MwOs2Ed8FgsNPUKl2T+qh0Buqnku3URyXbqY+6q+F+5ZZlYVnpn9W9M2s4xd0wjIy+V5ZlYZomwWCw2YMtbT1NHjrZ5HQ+n4/vfOc7vP/++ynL//WvfwGwxx57ZKIsERERERERkbTJqhH3cDjMvHnzAFizZg21tbW8+uqrAOy3334UFxdz0UUXMX36dK644gqmTp3KypUrueOOO5gyZQplZWWZLF9ERERERESkw2VVcK+srOTSSy9NWdbw+JFHHmH8+PGMGjWK+++/n9/97necf/75FBYWcvLJJ3P55ZdnomQRERERERGRtMqq4N6/f38WLVr0retNmDCB5557zoWKRERERERERDKrU13jLiIiIiIi0pVte49yyW4d+btScBcREREREclyXq8XgFAolOFKpK0aflcNv7udkVWnyouIiIiIiEhTlmVRVFTEhg0bAMjJydmh24l1JclksvFW4Zm4HZzjOIRCITZs2EBRUVGH1KDgLiIiIiIi0gn07t0boDG8S/Ns2yaRSODxeDDNzJ1kXlRU1Pg721kK7iIiIiIiIp2AYRj06dOHnj17Eo/HM11O1gqHwyxfvpyysjKCwWBGavB6vR062q/gLiIiIiIi0olYlpWRU8A7C9u2AfD7/QQCgQxX0zE0OZ2IiIiIiIhIFlNwFxEREREREcliCu4iIiIiIiIiWUzBXURERERERCSLKbiLiIiIiIiIZDEFdxEREREREZEspuAuIiIiIiIiksUU3EVERERERESymIK7iIiIiIiISBZTcBcRERERERHJYgruIiIiIiIiIllMwV1EREREREQkiym4i4iIiIiIiGQxBXcRERERERGRLKbgLiIiIiIiIpLFFNxFREREREREspiCu4iIiIiIiEgWU3AXERERERERyWIK7iIiIiIiIiJZTMFdREREREREJIspuIuIiIiIiIhkMQV3ERERERERkSym4C4iIiIiIiKSxRTcRURERERERLKYgruIiIiIiIhIFlNwFxEREREREcliCu4iIiIiIiIiWUzBXURERERERCSLKbiLiIiIiIiIZDEFdxEREREREZEspuAuIiIiIiIiksUU3EVERERERESymIK7iIiIiIiISBbLquC+cuVKbrjhBo4//nhGjhzJscce2+r6b7zxBsOGDfvW9UREREREREQ6K0+mC9jWkiVLmDdvHmPGjMG2bRzHaXHdSCTCr3/9a7p37+5ihSIiIiIiIiLuyqoR90MOOYR58+Zx1113sccee7S67n333Uffvn2ZOHGiS9WJiIiIiIiA7ThURZN8tjnCP9fWsaw6Rk0smemyZBeWVSPuptm24wirVq3ioYce4sknn+Thhx9Ob1EiIiIiIiJfsx2Hr0IJnlxaTdxuWBqmwGsyY7cCuvmzKmLJLiKrRtzb6le/+hXHH388w4cPz3QpIiIiIiLShdTGbZ5ZVrNNaK9XE7eZs7KWcMJu/okiO6HTHQ76xz/+wf/+9z9effXVDt2u4ziEQqEO3WZHC4fDKf8VyTbqo9IZqJ9KtlMflWzX1fvolqSHSLL5ubi+rEtQF0/ixCIuVyXb6ix91HEcDMNo07qdKrhHo1F+/etfc/HFF1NcXNyh247H45SXl3foNtOloqIi0yWItEp9VDoD9VPJduqjku26Yh/1eDx4+g5pdZ1QJMrK5Ytcqkha0xn6qM/na9N6nSq4//nPf8Y0TSZPnkxNTQ1QH7ht26ampoZAINDmF749r9fL0KFDO7LcDhcOh6moqGDgwIEEg8FMlyPShPqodAbqp5Lt1Ecl23X1PlqHF2h+RD1gGeQH/XQfMcLdoiRFZ+mjS5cubfO6nSq4L1++nJUrVzJhwoQmbePGjeOmm25ixowZ7dq2YRjk5OTsbImuCAaDnaZW6ZrUR6UzUD+VbKc+Ktmuq/ZRI2EzspuPL7bEmrRN6ptDod+DaXgzUJlsL9v7aFtPk4dOFtzPPvtspk6dmrJs9uzZrFixgltvvZWBAwdmpjAREREREekSgh6TQ/rlUhLw8J8NYSJJh0KfyaS+OQzK92HuQBgTaausCu7hcJh58+YBsGbNGmpraxsnodtvv/0YMmQIQ4akXlPywgsvsH79esaPH+96vSIiIiIi0vXkeS0m9AoyutiP7YDHrF8mki5ZFdwrKyu59NJLU5Y1PH7kkUcUzkVEREREJCuYhkGBT2Fd3JFVwb1///4sWrRjMzDedtttaapGREREREREJPPMTBcgIiIiIiIiIi1TcBcRERERERHJYgruIiIiIiIiIllMwV1EREREREQkiym4i4iIiIiIiGQxBXcRERERERGRLKbgLiIiIiIiIpLFFNxFREREREREspiCu4iIiIiIiEgWU3AXERERERERyWIK7iIiIiIiIiJZTMFdREREREREJIspuIuIiIiIiIhkMQV3ERERERERkSym4C4iIiIiIiKSxTztedLatWtZu3Yt++67b+OyhQsX8uCDDxKLxTj22GM57LDDOqxIERERERHJrJhtE4o71Nkeeg0ZTtxoV5TYeYkExBL1/7Us8HrA581MLSIuaden7ZZbbiEUCvHwww8DsGnTJk477TTi8Ti5ubm89tpr3HnnnRxxxBEdWauIiIiIiGRAXdzmo41hPtgQxnbqlxX5okwbXECPgIVhGO4UEo3B0lWwqeqbZQW5MGIwBPzu1CCSAe06VX7+/PkccMABjY//+te/EolEePHFF3nnnXeYMGECDz74YIcVKSIiIiIimeE4Douro7y//pvQDlAVs3l8STU1MdudQpJJWLEmNbQD1NTB50shFnenDpEMaFdwr66upqSkpPHx22+/zbhx4ygrK8M0TQ4//HCWL1/eYUWKiIiIiEhm1MZt3lsXbrYtknRYG0q4U0gsDusrm2+rDSu4yy6tXcG9uLiYtWvXAlBTU8Mnn3zCxIkTG9uTySSJhEsfYBERERERSZukUx/eW7I+7NL3/uS3jOxHFdxl19Wua9wPOOAAHn30UfLy8vjggw9wHIdDDz20sX3p0qX06dOnw4oUEREREZHMsAzI85othvdeQZcmqbO+ZczRrwnqZNfVrhH3K664gsGDB/Ob3/yG9957j5/+9KeUlpYCEIvFmDt3LhMmTOjQQkVERERExH15XpPv9A422xawDPrmuBTcfV7oVdJ8W15QM8vLLq1dn7Lu3bvz5JNPsnXrVvx+Pz6fr7HNtm3+/Oc/07t37w4rUkREREREMsMwDIYV+amJ2dvNKm8ybXABBb52jQXuOMuCQf3AtmHjlm+WN8wqr+Auu7AdDu7hcJgf/OAHnHjiicyYMaNJeyAQYPjw4R1SnIiIiIiIZF6Ox2RC7yBjSgLUxZM4iTj5AS+FAZfv5e73we4DYGC/b+7j7vOAV6Fddm07fHgsGAyyevVq9+7VKCIiIiIiGeczTYr8Ft3MBOuXLcRrZ2gyao8HcgJQkAe5QYV26RLadV7LxIkTeffddzu6FhERERERERHZTruC+wUXXEBFRQVXXXUVH330EevXr6eqqqrJPxERERERERHZOe26KGXy5MlA/W3fXn755RbXKy8vb19VIiIiIiIiIgK0M7hfeOGFusZdRERERERExAXtCu4XX3xxR9chIiIiIiIiIs3okJsubt26lWQy2RGbEhEREREREZFttDu4L1iwgDPPPJMxY8Ywfvx4PvzwQwA2b97M+eefzwcffNBhRYqIiIiIiIh0Ve0K7h9//DGnnHIKK1eu5LjjjsO27ca24uJiamtreeqppzqsSBEREREREZGuql3B/f/+7/8YMmQIc+bM4fLLL2/SPn78eD799NOdLk5ERERERESkq2tXcF+wYAHTpk3D5/M1O7t8r1692LRp004XJyIiIiIiItLVtSu4ezyelNPjt7d+/XpycnLaXZSIiIiIiIiI1GtXcB8zZgyvvfZas22hUIjnn3+ecePG7VRhIiIiIiIiItLO4H7JJZfw2Wefcc455/DOO+8AsGjRIp555hmmTZvG5s2bueCCCzq0UBEREREREZGuqN0j7rNnz2blypVcffXVANx2221cf/312LbN7NmzGT58eIcWKiIiIiIiItIVedr7xAkTJvDaa6/xxRdfsHLlShzHobS0lFGjRjU7YZ2IiIiIiIiI7Lh2B/cGI0eOZOTIkR1RCytXruSBBx7g008/ZcmSJQwePJiXX365sb22tpaHHnqIefPmUVFRgc/nY8899+Tyyy9n2LBhHVKDiIiIiIiISDZpd3CPxWI8/fTTzJs3jzVr1gDQr18/Jk2axIknnojf79/hbS5ZsoR58+YxZswYbNvGcZyU9rVr1/LUU09xwgkncNlllxGNRnnwwQc5+eSTee655xgyZEh7X46IiIiIiHQW0RjYDhgG+L31/3VZ0rapidvYDlgGFPl3eky0fWwbYnFwAMsEnzczdUhatat3rVu3jtNPP50VK1bQo0cPBgwYAMDChQv55z//yWOPPcbDDz9M7969d2i7hxxyCIcddhgA11xzDZ999llKe//+/fn73/9OMBhsXLb//vtzyCGH8Pjjj3P99de35+WIiIiIiEhnEE/A5mpYsaY+vHssKO0Nvbu7Gliro0k+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i2pXcP+///s/hgwZwpw5c7j88subtI8fP55PP/10p4sTERHZWVtjSV5ZWUtzY+uvr66lLqFRdxERabu6hMMba+qaLLcdeGVlLbUxXUIsHa9dwX3BggVMmzYNn8/X7OzyvXr1YtOmTTtdnIiIyM4KJx1q4s2H86QDVfqCJSIiO6AykqSlM+KrYjZhnckladCu4O7xeFJOj9/e+vXrycnJaXdRIiIiIiIiIlKvXcF9zJgxvPbaa822hUIhnn/+ecaNG7dThYmIiHSEoGVQ4G3+z51lQJHPcrkiERHpzEoCFmbTk44BKPKZBK0WGkV2QruC+yWXXMJnn33GOeecwzvvvAPAokWLeOaZZ5g2bRqbN2/mggsu6NBCRURE2iPfZzF5QF6zf/CO6J9HrqdD7owqIiJdRK7H4LB+uU2WmwZMHpBHng4ISxp42vOkMWPGMHv2bG666SauvvpqAG677TYAysrKmD17NsOHD++4KkVERHZCv1wvZwwv4j8bw3wVSlDkNRnfK0j3oAevRkZERGQHeC2TkcV+euV4+GBdmKp4kr45XvbtGaCbQrukSbuCO8CECRN47bXXKC8vp6KiAsdxKC0tZdSoUc1OWCciIpIpHtOge9DD4f3zCEVjbNqwjm6mF7/ly3RpIiLSCQUsk365JlMGWsRt8FkGnpbOnxfpAO0O7g1GjBjBiBEjOqIWERGRtPKYBh4nyZZNm+jdo0emyxERkU7Oa5l4NcguLmhzcK+qqtrhjRcVFe3wc0RERERERETkG20O7hMmTNjhjZeXl+/wc0RERERERETkG20O7o7jEAgEmDRpErvttls6axIRERERERGRr7U5uJ977rm88sorvPbaa1RUVHDsscdy7LHH0qdPn3TWJyIiIiIiItKltfnmtZdffjlvvPEGjz/+OPvssw8PPfQQhx56KD/4wQ948skn23UNvIiIiIiIiIi0rs3BvcHYsWO54YYb+Oc//8m9995Lnz59+M1vfsOBBx7Ieeedx6effpqOOkVERERERES6pHbfDs6yLCZNmsSkSZP46quvuPrqq5k3bx6jRo1izJgxHVmjiIiIiIiISJfV7uAeDod54403eOWVV3jvvffwer1MmTKFww47rCPrExEREREREenSdii4JxIJ3nnnHV5++WXeeustEokEEydO5De/+Q2HHnoofr8/XXWKiIiIiIiIdEltDu7XX389r7/+OrW1tey777787Gc/48gjj6SgoCCd9YmIiIiIiIh0aW0O7s888wyBQIBDDjmEXr16sWjRIhYtWtTqc6677rqdLlBERERERESkK9uhU+UjkQh///vf27SuYRgK7iIiIiIiIiI7qc3BfeHChemsQ0RERERERESascP3cRcRERERERER92RVcF+5ciU33HADxx9/PCNHjuTYY49tdr1nnnmGI488ktGjR3Pcccfx1ltvuVypiIiIiIiIiDuyKrgvWbKEefPmMWDAAIYMGdLsOq+88grXX389Rx99NPfffz977bUXF110EZ988om7xYqIiIiIdEGmaRIMBjNdhkiXskOT06XbIYccwmGHHQbANddcw2effdZknbvuuovJkydz2WWXAbD//vuzePFi/vjHP3L//fe7Wa6IiIiISJdRG0+yJWpTUZPE362UsOHFm7TxWlk1FuiKRCKBFYtDVS2EI1CQh5MbxMwJuFpHLGlTG3dYsTVGKGEzMN9HN79JntdytQ5Jv6wK7qbZ+of+yy+/pKKigquuuipl+THHHMPtt99OLBbD5/Ols0QRERERkS5nayzJc8trWBdONi57a12U4wbmMbTA16XCeyKRwKoNYyxYArb99dL1GH4fzujdMHLdORshlrRZUh3j5ZW1OF8ve29dmL45HqYOyiffp/C+K2nTJ+yRRx5hxYoV6a7lWy1fvhyAQYMGpSwfMmQI8XicL7/8MhNliYiIiIjsshK2wwcbwimhHcABXqqoZWvCaf6JuygzlsD4fOk2of1r0RgsWUkiHHWljtq4zd+2Ce0N1oYS/HdThKTdtX4vu7o2jbjfeuutdOvWrTEwjxgxgttvv50pU6aktbjtVVdXA1BQUJCyvOFxQ3t7OI5DKBRqf3EuCIfDKf8VyTbqo9IZqJ9KtlMflWwTM718Whlpts0BVlRHCeYbOE7XCIrBSBwSyWbbjOparGQy7bnCNE2WVNsttn+8McJexT58djytdWSrzrIfdRwHwzDatG6bgntBQQGVlZUpP2BXE4/HKS8vz3QZbVJRUZHpEkRapT4qnYH6qWQ79VHJFn0G70685YxITTTBqi1fUVtb615RGVJQUMDQwuLWV7JtyhctSmsd+fn51AR6t9gesx1C4TDLli9Jax3ZrjPsR9t6qXebgvv48eO5++67KS8vJz8/H4C//vWvfPrpp60+77rrrmtTEW1VWFgIwNatW+nRo0fj8pqampT29vB6vQwdOnTnCkyzcDhMRUUFAwcO1EyekpXUR6UzUD+VbKc+KtkmYXroGUywIdz8KPOgQj89S0pdriqDWjmIgcfC8XgYMWJE2svwxC3+Wxlrtq1Pjoe8YMCVOrJRZ9mPLl26tM3rtim433jjjfz617/mvffeo7KyEsMweO+993jvvfdafI5hGB0e3AcPHgzUX+ve8P8Nj71eL6Wl7d9hGIZBTk7OTtfohmAw2Glqla5JfVQ6A/VTyXbqo5JNDusHjy+tabK8Z9Cie8BLjs+fgaoyIxGJYnUvwthU1aTNGdAXx+8lx0r/xHA9Y0m6Byw2RZoeUDm0fy4FAS/QtSfuzvb9aFtPk4c2BveSkhLuuOOOxsfDhw/nt7/9revXuJeWljJw4EBeffXVxtvGAcyZM4cJEyZoRnkRERERkTTonePhlKEFvLGmjg3hJB4DRpf4mdArhzxf15lRHsAT8GMPLoWcIMbaDfXXuwd8OAP6kizMx+NCaAfI81mcNKSA99eFWbA5QsKBXkGLw/rn0TOgGeV3Ne26Hdytt97K3nvv3dG1EA6HmTdvHgBr1qyhtraWV199FYD99tuP4uJiLr74Yq688krKysoYP348c+bMYf78+Tz22GMdXo+IiIiIiIDPMinL93HyEA/RRJJIOERRjpecLnrLMTPoJ1nWG6NXCYbjYBsGVk7A9XttF/gsDu2fy4TeQWwHfKZBjrdrHUjpKtrVt6ZOndr4/0uXLmXNmjUA9OvXb6euE6+srOTSSy9NWdbw+JFHHmH8+PEce+yxhMNh7r//fmbPns2gQYO455570nIgQUREREREvpHrNTHiEVasWEpRF71+uoFlWZBTf+Aik4cvPKZBQRc9gNKVtPug0BtvvMFtt93WGNob9O/fn2uuuYZDDz10h7fZv39/FrVhBsYTTzyRE088cYe3LyIiIiIiItLZtCu4z5s3j0suuYS+ffty+eWXM2TIEACWLVvG008/zcUXX8ysWbM46KCDOrRYERERERERka6mXcF95syZDBs2jL/85S8ps/QdeuihnHrqqZxyyin88Y9/VHAXERERERER2Untmrlg0aJFfO9732t2av2cnBymTp3aplPeRURERERERKR17Qrufr+f6urqFturq6vx+7vOvRxFRERERERE0qVdwX38+PE88sgj/O9//2vS9umnn/Loo48yYcKEnS5OREREREREpKtr1zXuV111FdOnT+eUU05hzz33ZNCgQQCsWLGC+fPnU1JSwpVXXtmhhYqIiIiIiIh0Re0acS8tLeWll17ihz/8IdXV1cyZM4c5c+ZQXV3Naaedxosvvkj//v07ulYRERERERGRLqfd93EvKSnhZz/7GT/72c86sh4RERERERER2Ua7RtxFRERERERExB0K7iIiIiIiIiJZTMFdREREREREJIspuIuIiIiIiIhkMQV3ERERERERkSy2w8E9HA4zbdo0nnjiiXTUIyIiIiIiIiLb2OHgHgwGWb16NYZhpKMeEREREREREdlGu+7jPnHiRN59912mT5/e0fWIiIiIdEmxpE1dwiFke+g1ZDhxs11f03YZdfEkoYRD3HYIekxyPQY+S1d5ZlQyCbEEgXiSUYOGYJGZgbyGvhFJOvhMg6DHoMBnuV5HKG5Tl7CJ2w4ByyTXa+DPQB9NhiKYiQTYDng9xC0PvoDX1Rpsx6E2bhNK2DgO5HhN8rwmlsuDvdGkXV+H7aX3sNFETJOAbWOanX/f0a6/CBdccAGXXnopV111FSeffDKlpaX4/f4m6xUVFe1sfSIiIiK7vNq4zXtfhfikMoLz9bIegRhTB5kUB7pegK+MJHhhxVY2RZIAGMDe3QN8p3cOud7O/wW8U4rFYc16+HI9puPgBwj4YY8hkBsElwJaVTTJP9bUsbg61risb46HYwfkufpZqYomebFiK1+FEo3LRhb5OKRfLnkuHURIxONY4ShW+XKIfP1+GAbe/r1I9umBFWyaz9IhnrRZVZvg5ZVbCSfr92B+y+Co0lwGF/hcO5ixNZbk8y1R3v0qROLrHWm+12TKgDz65HrwdvLw3q7ePXnyZACWLl3Kyy+/3OJ65eXl7atKREREpItI2g4fbwzzv8pIyvKNkSRPLq3hh7sXkp+B0cRMqYkleWJpDbVxu3GZA3y8KUKux2T/3kHXR/G6PMeBTVtg1brU5ZEofLoI9hlZH+LTLBxP8s5XqaEdYG0owYsVW5k2qIBCf/o/K7XxJM8ur2k8sNTgi6oYXsvgsP65roREK57AmL+k/kyIBo6D8eU6zIAPgj3TXgNAVczm2eU1jQcdAaJJhxcravnRsEL65LgTmNeEEry9NpSybGvc5ullNZw+vIiSQBcM7hdeeKGucRcRERHpALVxm482Rpptq4nbbIkmu1Rwr4wkU0L7tj7cGGZUiZ/CLvR+ZIVYHFZ+1XxbIgk1da4E97qEQ/mWWLNt68NJ6hK2S8HdbhLaGyzYHGVCrxyK3BjsrqpNDe3bMFatI1lUgJUTSGsJCdvho43hlNC+rX+tCzNlgJX2y1yqo0n+tS7UbFvCgUVVMQ7o3bnPXmpX9RdffHFH1yEiIiLSJcUdh5jd0tde2BxNUpbvYkEZ1lIggvpRvEQr75Wkie3Uh/eW1IagZ3Hay4jaTosBEepHV91QE2v559gOrX6eO1Rt80EVgGgMo9V3q2PEbYeN4ZY/s5WRJHEb0n2szcZhcyv7jg3hBHYnv9a9QyrfunUryRaO9oiIiIhIy7yGgc9s+UzGYhdGELNJ90DLr9dvGXhaea8kTUwDfK1MdpaX40oZftNodTq8fJfmPyjwtfxzTINWP88dqrX33e/DcWHyQK9p0CPY8me2JGDhxq/FwqC4lX1Hz6CnU4d22IngvmDBAs4880zGjBnD+PHj+fDDDwHYvHkz559/Ph988EGHFSkiIiKyq8rzmuzbo/nTWQu8Jt26WHAvCVjktfBNf78ewRbbJI18XhjQp/k2jwUFua6UkesxGNHN12xbr6BFrsedvpHnNVs8wDS62E+u16XgXpQHVvN1OGW9036aPIDHNNi3R7DFQwQH9A66cjeIAr/FAb2bP5DhMWBYUfP9pjNp17v48ccfc8opp7By5UqOO+44bPub00WKi4upra3lqaee6rAiRURERHZVlmkwtkeQvUsCKV9+ewQspg8t6FLXtwMU+CxmDC1ICUYGMLZ7gL26BzQxXSYYBnTvBmW9U2ePD/hhzDDwuxOKgl6Lg/rksnth6s/rm+Ph+IH5rlzfDpDntfj+4AL65KRedTyyyMfE3jmuzV6e9Hpw9twdAtu8H4aBU9obu1uhKzUAFPlMvj+4gKD1Td/wWwbHD8yjxMUDj/1yPBzcNwfPNl0032ty0pACCls5S6KzaNc17v/3f//HkCFDePrpp6mtreWZZ55JaR8/fjwvvPBChxQoIiIisqvL85p8t18O+/UKEooncRJx8gNeCrvgreAASgIeZgwt0H3cs4nPC2V9oHcP7FiMeDKJFfDjyQm6WkaR3+LI0lwm9snJ6H3ci/wWJw4uIJSwiWXoPu4erxe8XpJ77o4Z3+Y+7l4PvtYubehgXstkUIGX04cXNd7HPddrkuvyfdzzfRZ7dw+we6GPuoSDiUOOx6TQZ3b60+ShncF9wYIF/OQnP8Hn8zU7u3yvXr3YtGnTThcnIiIi0lX4LBOfBf5klPJlCykeMQLo/Kd3tleu1yLXvewhbWFZELSIOEnKly5mxIgR7QsTOylb+kaO1yQnCy7dsIIB2Ob4SSb2GqZRf/DE7QMo2/NbJn7LJBAKUV5ezogRIzBNd+ZgSLd29TSPx5Nyevz21q9fT07OrvEGiYiIiIiIiGRSu4L7mDFjeO2115ptC4VCPP/884wbN26nChMRERERERGRdgb3Sy65hM8++4xzzjmHd955B4BFixbxzDPPMG3aNDZv3swFF1zQoYWKiIiIiIiIdEXtHnGfPXs2K1eu5Oqrrwbgtttu4/rrr8e2bWbPns3w4cM7tFARERERERGRrqjd80lMmDCB1157jS+++IKVK1fiOA6lpaWMGjWq2QnrRERERERERGTH7fREkCNHjmTkyJEdUYuIiIiIiIiIbKfdwT0Wi/H0008zb9481qxZA0C/fv2YNGkSJ554In6/v8OKFBEREREREemq2hXc161bx+mnn86KFSvo0aMHAwYMAGDhwoX885//5LHHHuPhhx+md+/eHVqsiIiIiIiISFfTruB+8803s3btWv7whz9w1FFHpbTNnTuXa665hptvvpl77723Q4oUERERERER6araFdz//e9/8+Mf/7hJaAc4+uij+eKLL3jsscd2ujgRERERERGRrq5dt4PLzc2luLi4xfbu3buTm5vb7qJEREREREREpF67gvu0adN44YUXCIfDTdrq6up4/vnnOeGEE3a6OBEREREREZGurk2nyr/++uspj0eMGMHbb7/N0Ucfzfe+973GyekqKip48cUXKSwsZNiwYR1frYiIiIiIiEgX06bgfskll2AYBo7jAKT8/6xZs5qsv27dOq644gqOOeaYDixVREREREREpOtpU3B/5JFH0l2HiIiIiIiIiDSjTcF9v/32S3cdO+TNN99k1qxZLF26lNzcXPbZZx+uvPJKSktLM12aiIiIiIiISIdq1+R0mfTBBx9w0UUXMXToUP74xz/ys5/9jIULF3LGGWcQiUQyXZ6IiIiIdICk7VATS1IVTVIbT2a6nMyLJyAc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cSH+qa6EooBidEwLBWB+A1SWHVxWXpJe5tRIyC4xZD6vDo3NfB4KwnHTYVJ1+uoqpEeUP35GuqAfY9ySzykqgBPr01feATwe7IlVcMKs9FRsTvD5oLoC6qcefE2fD6ZOgGmTHMsdYZ+Hj0wq5IMTCgh504VXacDDedOKOK4siOcoirH3whcOkjphFsnx46B/5omiAqwTZ5MqdPAqs/K5I0bdFfdbb72V559/nhtuuIHe3l7efPPNzLrGxsYjfkZA5FgQ8nqYWRpkfIGPZCqdswt9msNd0reuVYV9XDC9mLhlYwBhn0HA4enXAl4PU4oDLJ3hw0zZGAdidExNbSXZGUa6GDtuevoqmg34velO+Bh0aD5PJFPEIhHKCn0U+B2eH9stQkGYPgkmVqdHl/d6xmwB4JZ8js8LZSUwtx7LTBKNRvEXFhB0er7wUBAmVEFpcTo2DAOCfsfnki/ye1lUE2ZORZCUDT5PepnTvOEg1ozJJKdMSI8B4fHgDwWGHLQuJ5TPHTHqPs0//vGPANx+++2D1j377LPU1tY63SSRvMvHF4WMDmGfh7ALMn3hWLtiKEfO503/EyCdzyNmnK3NmykbK89xD8XrhQLFRj+35HMCfuJJkw0tW/M71kBB/h+n8RgGJYH8x6jXLXnULe04Rrnh8D8qzz33XL6bICIiIiIiIuIYXQIRERERERERcTEV7iIiIiIiIiIupsJdRERERERExMVUuIuIiIiIiIi4mAp3ERERERERERdT4S4iIiIiIiLiYircRURERERERFxMhbuIiIiIiIiIi6lwFxEREREREXExFe4iIiIiIiIiLqbCXURERERERMTFVLiLiIiIiIiIuJgKdxEREREREREXM2zbtvPdiHx74403sG2bQCCQ76YMy7ZtTNPE7/djGEa+myMyiGJURgPFqbidYlTcTjEqbjdaYjSRSGAYBieddNLf3dbnQHtcz81/zEMZhuH6kwsytilGZTRQnIrbKUbF7RSj4najJUYNwzjiWlRX3EVERERERERcTM+4i4iIiIiIiLiYCncRERERERERF1PhLiIiIiIiIuJiKtxFREREREREXEyFu4iIiIiIiIiLqXAXERERERERcTEV7iIiIiIiIiIupsJdRERERERExMVUuIuIiIiIiIi4mAp3ERERERERERdT4S4iIiIiIiLiYircRURERERE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9ttZv349FRUVfOYzn2H58uWaF1aycjpGV6xYwbp169i7dy+GYVBfX8+ll17Keeedl7s3KaPeSMbpUPu6+uqr+eIXv5j5WblUjobTMapcKkdrpGL0hhtu4Fe/+lXW/dx2221ceOGFmZ9HQx5V4S4iIiIiIiLiYnrGXURERERERMTFVLiLiIiIiIiIuJgKdxEREREREREXU+EuIiIiIiIi4mIq3EVERERERERcTIW7iIiIiIiIiIupcBcRERERERFxMRXuIiIiY8iTTz7J7Nmzefvtt/PdFBERETlCKtxFRERcpr+47v83Z84cFi9ezGWXXcbq1avp7e3NdxMH2Lx5M6tWrWLHjh3DbmeaJueeey5nnHEGsVhs0PodO3Zw4okncs011+SqqSIiIqOSCncRERGXuuaaa/jud7/LypUrufTSSwH49re/zXnnnce7776b59YdtHnzZn7yk5/Q2to67HZ+v59vfOMb7Nixg5/97GeD1n/zm9/E7/dz00035aqpIiIio5IKdxEREZdasmQJ559/Pp/85Cf5whe+wC9+8Qvuu+8+Ojo6uPLKK7NetXa7+fPnc/HFF3PvvfeyadOmzPLf/va3/P73v+e6666juro65+2IRCI5fw0REZGRosJdRERkFFm0aBFXXnklra2tPPXUUwPWbdmyhWuuuYZTTjmFOXPmcOGFF/Lss89m3U8sFuOWW25h4cKFnHTSSXz1q1+lq6trwDazZ89m1apVg373Ix/5CDfccAOQvq3/S1/6EgDLli3L3N7/2muvDfkevvzlL1NWVsbXv/51bNumr6+Pb3/728yfP59LLrkEgLfeeovLLruMBQsWcOKJJ/LP//zPvP766wP209raysqVK/nYxz7G3LlzWbhwIddcc82gW/b7Hz34v//7P1auXMmiRYv40Ic+NGT7RERE3MaX7waIiIjI0Tn//PP54Q9/yEsvvcRFF10EwKZNm7jkkkuoqalh+fLlFBQU8Mwzz3DVVVexatUqPvrRjw7Yxze+8Q1KSkq4+uqr2bp1Kw8//DA7d+7kgQcewDCMI27L+973Pi699FIeeOABrrjiCurq6gCYMWPGkL9TXFzMTTfdxJe+9CUee+wxNm/eTEdHB3fffTeGYfDKK6+wfPlyTjjhBK6++moMw+DJJ5/ks5/9LA899BBz584F4O233+Yvf/kLZ599NuPHj6e1tZWHH36YZcuW8fTTTxMOhwe87q233kpFRQVXXXWVrriLiMioosJdRERklBk/fjzFxcVs3749s+zf//3fmTBhAk888QSBQACAT3/601xyySV8//vfH1S4+/1+7r//fvx+PwATJ07ke9/7Hs899xynn376Ebdl8uTJnHzyyTzwwAO8//3vZ+HChUf0ex//+Mc57bTT+O53v0skEuHyyy+nvr4e27ZZuXIlCxcu5J577smcRLj44os5++yz+dGPfsS9994LwIc//GE+/vGPD9jvaaedxtKlS/ntb3/LBRdcMGBdaWkp999/P16v94jfn4iIiBvoVnkREZFRqKCggL6+PgD279/Pq6++yllnnUVvby/79u1j3759dHZ2snjxYpqbm9m9e/eA31+6dGmmaAe45JJL8Pl8vPDCC469h1tuuQXTNBk/fjxXXnklAOvXr6e5uZlzzz2Xzs7OzHuJRCIsWrSIP/3pT6RSKQBCoVBmX6Zp0tnZyZQpUygpKeGdd94Z9HoXXXSRinYRERmVdMVdRERkFIpEIlRWVgKwbds2bNvmxz/+MT/+8Y+zbt/R0UFNTU3m56lTpw5YX1hYSFVV1d8dGX4kTZw4kcrKSmbNmpUpwpubmwG4/vrrh/y9np4eSktLicVi3HXXXTz55JPs3r0b27YHbHO42trakX0DIiIiDlHhLiIiMsq0tbXR09PDlClTADJXoP/lX/6FD37wg1l/p3/bkWBZ1ojt63D9xfdXv/pVGhoasm5TUFAApKeP63/2fd68eRQXF2MYBtdee+2AIr5fMBjMWbtFRERySYW7iIjIKPPrX/8agMWLFwPp58wh/dz6+9///iPaR0tLC6eeemrm576+Pvbs2cOSJUsyy0pLS+nu7h7we4lEgj179gxYdjSD2f09/e+lqKjo776X/ufY+0e4B4jH41mvtouIiIxmesZdRERkFHnllVf42c9+Rm1tLeeddx4AlZWVnHLKKTzyyCO0t7cP+p19+/YNWvbII49gmmbm54cffphkMjmgcJ88eTJ//vOfB/zeo48+OuiKe//o7SNRMJ9wwglMmTKFe++9N/MM/6EOfS/Znld/4IEHcnpHgIiISD7oiruIiIhLvfjiizQ1NWFZFnv37uW1117jj3/8IxMnTuTOO+8ccOv317/+dT796U9z7rnnctFFFzF58mT27t3Lm2++SVtb26A5303T5HOf+xxnnXUWW7du5aGHHmLBggUDRpT/1Kc+xde//nW++MUv8v73v593332Xl156ifLy8gH7amhowOv1cvfdd9PT00MgEODUU0/NPIN/NDweD9/61rdYvnw555xzDhdeeCE1NTXs3r2b1157jaKiIv7zP/8TSI8q/+tf/5qioiJmzpzJm2++ycsvv0xZWdlRv66IiIibqXAXERFxqTvuuANI3wJfVlZGfX09N954IxdeeCFFRUUDtp05cyZPPPEEP/nJT/jVr37F/v37qaiooLGxkauuumrQvm+55RbWrFnDHXfcgWmanH322dx0000Dbnu/6KKL2LFjB48//jh/+MMfWLBgAffddx+f+9znBuyrqqqKW2+9lbvuuouvfe1rWJbF6tWr/6HCHWDhwoU88sgj/OxnP+PBBx8kEolQVVXF3LlzWbp0aWa7r33ta3g8HtasWUM8Huekk07ivvvu4/LLL/+HXldERMStDDvb6C0iIiIiIiIi4gp6xl1ERERERETExVS4i4iIiIiIiLiYCncRERERERERF1PhLiIiIiIiIuJiKtxFREREREREXEyFu4iIiIiIiIiLqXAXERERERERcTEV7iIiIiIiIiIupsJdRERERERExMVUuIuIiIiIiIi4mAp3ERERERERERdT4S4iIiIiIiLiYircRURERERERFzs/wckTq7KuQO1DQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the value counts for Group_Type per year\n",
        "group_type_per_year = groups_df.groupby(['Debut_Year', 'Group_Type']).size().unstack(fill_value=0)\n",
        "\n",
        "print(\"Value counts for Group_Type per Debut Year:\")\n",
        "print(group_type_per_year)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jityQoS3L1HX",
        "outputId": "2f0b1dcf-f3b5-4e37-d13f-6a402132511f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Value counts for Group_Type per Debut Year:\n",
            "Group_Type  Boys  Girls\n",
            "Debut_Year             \n",
            "1995           1      0\n",
            "1996           1      0\n",
            "1997           1      2\n",
            "1998           1      0\n",
            "1999           2      0\n",
            "2001           0      1\n",
            "2003           1      0\n",
            "2004           2      0\n",
            "2005           2      2\n",
            "2006           1      1\n",
            "2007           3      4\n",
            "2008           4      1\n",
            "2009           2      6\n",
            "2010           8      4\n",
            "2011           7     11\n",
            "2012          13     13\n",
            "2013           6      6\n",
            "2014          15     13\n",
            "2015          12     12\n",
            "2016          12     17\n",
            "2017          26     23\n",
            "2018          11     22\n",
            "2019          14     12\n",
            "2020           2      2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'> **c) Videos data**"
      ],
      "metadata": {
        "id": "F8qslrBsIdYz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Release Year by Type using a Line Plot\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Grouping by Release Year and Type, and counting occurrences\n",
        "release_type_counts = videos_1.groupby(['Release_Year', 'Type']).size().unstack(fill_value=0)\n",
        "\n",
        "# Plotting the line plot\n",
        "release_type_counts.plot(kind='line', marker='o', linestyle='-', color=sns.color_palette('Paired', len(release_type_counts.columns)), figsize=(12, 6))\n",
        "\n",
        "# Titles and labels\n",
        "plt.title('Release Year Distribution by Type', fontsize=16)\n",
        "plt.xlabel('Release Year', fontsize=14)\n",
        "plt.ylabel('Count', fontsize=14)\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend(title='Type', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 578
        },
        "id": "OeCGDbz4Mtqp",
        "outputId": "1066d47c-4d48-4f16-a76c-76a6f7ecbcbe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the value counts for Type per Release Year\n",
        "type_per_year = videos_1.groupby(['Release_Year', 'Type']).size().unstack(fill_value=0)\n",
        "\n",
        "# Display the value counts in a table\n",
        "import pandas as pd\n",
        "print(\"Value counts for Type per Release Year:\")\n",
        "display(type_per_year)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ukiOr7taIjMH",
        "outputId": "72a6c805-1311-4a4e-d5dd-830bc8d2564d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Value counts for Type per Release Year:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Type          Boy  Boy Solo  Co-Ed  Girl  Girl Solo  Special\n",
              "Release_Year                                                \n",
              "1992            2         0      0     0          0        0\n",
              "1993            2         0      0     0          0        0\n",
              "1994            2         0      0     0          0        0\n",
              "1995            5         0      0     0          0        0\n",
              "1996            2         0      1     0          0        0\n",
              "1997            3         0      0     0          0        0\n",
              "1998            4         0      0     0          0        0\n",
              "1999            3         0      6     0          0        0\n",
              "2000            3         0      1     0          0        0\n",
              "2001            5         0      0     0          0        0\n",
              "2002            0         0      3     0          0        0\n",
              "2003            5         0      1     0          0        0\n",
              "2004           24         0      5     0          0        0\n",
              "2005           16         0      2     3          0        0\n",
              "2006           22         0      1     5          0        0\n",
              "2007           31         0      4    11          0        0\n",
              "2008           45         1      6    20          0        0\n",
              "2009           43         0      9    33          0        0\n",
              "2010           54         0      4    50          0        0\n",
              "2011           77         0     10    82          1        0\n",
              "2012          141         1      9    93          1        0\n",
              "2013          159         0     11   104          0        0\n",
              "2014          176         1     17   113          4        0\n",
              "2015          187         5      3   120          3        0\n",
              "2016          196         6     11   150         12        0\n",
              "2017          231        21     13   157         47        0\n",
              "2018          250        34      4   170         44        0\n",
              "2019          210        57      8   167         60        0\n",
              "2020           70        13      3    48         32        1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7109bf7d-8493-4f53-a111-525eb4487663\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Type</th>\n",
              "      <th>Boy</th>\n",
              "      <th>Boy Solo</th>\n",
              "      <th>Co-Ed</th>\n",
              "      <th>Girl</th>\n",
              "      <th>Girl Solo</th>\n",
              "      <th>Special</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Release_Year</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1992</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1993</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1994</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1995</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1996</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1997</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1998</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2000</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2002</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2004</th>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2005</th>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006</th>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2007</th>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008</th>\n",
              "      <td>45</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009</th>\n",
              "      <td>43</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>33</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010</th>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>50</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011</th>\n",
              "      <td>77</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>82</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012</th>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>93</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>159</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>104</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>176</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>113</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015</th>\n",
              "      <td>187</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>120</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016</th>\n",
              "      <td>196</td>\n",
              "      <td>6</td>\n",
              "      <td>11</td>\n",
              "      <td>150</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017</th>\n",
              "      <td>231</td>\n",
              "      <td>21</td>\n",
              "      <td>13</td>\n",
              "      <td>157</td>\n",
              "      <td>47</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018</th>\n",
              "      <td>250</td>\n",
              "      <td>34</td>\n",
              "      <td>4</td>\n",
              "      <td>170</td>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019</th>\n",
              "      <td>210</td>\n",
              "      <td>57</td>\n",
              "      <td>8</td>\n",
              "      <td>167</td>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020</th>\n",
              "      <td>70</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>48</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7109bf7d-8493-4f53-a111-525eb4487663')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7109bf7d-8493-4f53-a111-525eb4487663 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7109bf7d-8493-4f53-a111-525eb4487663');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-30fd00dc-94f7-4f6d-aa32-b390a83cc8c6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30fd00dc-94f7-4f6d-aa32-b390a83cc8c6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-30fd00dc-94f7-4f6d-aa32-b390a83cc8c6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_51ca17a5-da4c-411b-ade5-6db8d86166dc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('type_per_year')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_51ca17a5-da4c-411b-ade5-6db8d86166dc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('type_per_year');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "type_per_year",
              "summary": "{\n  \"name\": \"type_per_year\",\n  \"rows\": 29,\n  \"fields\": [\n    {\n      \"column\": \"Release_Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          2019,\n          2008,\n          2004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Boy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 83,\n        \"min\": 0,\n        \"max\": 250,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          2,\n          141,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Boy Solo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 0,\n        \"max\": 57,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          34,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Co-Ed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 17,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          13,\n          11,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Girl\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60,\n        \"min\": 0,\n        \"max\": 170,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          0,\n          3,\n          33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Girl Solo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 0,\n        \"max\": 60,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          60,\n          1,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Special\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##<font color='#b86fa5'> **Identify Outliers**"
      ],
      "metadata": {
        "id": "Zfa7x1bC8VQu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'>Boxplot"
      ],
      "metadata": {
        "id": "FAUS5t7dUmVQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Boxplot for detecting outliers in Group Size (Members)\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.boxplot(x=groups_df['Members'], color='skyblue')\n",
        "plt.title('Boxplot for Group Size (Members) to Detect Outliers')\n",
        "plt.xlabel('Number of Members')\n",
        "plt.show()\n",
        "\n",
        "# Boxplot for detecting outliers in Birth Year of Idols\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.boxplot(x=idols_1['Birth_Year'], color='lightgreen')\n",
        "plt.title('Boxplot for Birth Year to Detect Outliers')\n",
        "plt.xlabel('Birth Year')\n",
        "plt.show()\n",
        "\n",
        "# Boxplot for detecting outliers in Release Year of Videos\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.boxplot(x=videos_1['Release_Year'], color='purple')\n",
        "plt.title('Boxplot for Release Year to Detect Outliers')\n",
        "plt.xlabel('Release Year')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "RxXq-Jwh8edK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "44df8cf9-42ef-4e48-d2de-fab90c8c60a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color='#b86fa5'>*Outlier Identification with Boxplot:\n",
        "Using boxplots for analyzing idols, groups, and videos, it was evident that while there are some outliers present, they do not skew the main distribution of the data significantly. The boxplot clearly highlights the central tendency and spread of the data, making it easy to distinguish between the main data points and the outliers.*\n",
        "\n",
        "\n",
        "\n",
        "<font color='#b86fa5'>*Impact of Outliers on Analysis:\n",
        "Given the results, there is no pressing need to eliminate the outliers. The key insights derived from the boxplots show that the outliers will not substantially impact the overall analysis. The primary trends and patterns remain evident, even with the presence of these outliers.*"
      ],
      "metadata": {
        "id": "t6vymm_MdgpD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###<font color='#b86fa5'>IQR Method\n",
        "\n",
        "<font color='#b86fa5'>The Interquartile Range (IQR) method is one of the most common ways to detect outliers. It works by calculating the IQR (difference between the 75th percentile and 25th percentile) and defining any data points that fall outside of 1.5 times the IQR as outliers."
      ],
      "metadata": {
        "id": "l6_UwHz-VSGN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# IQR Method for identifying outliers in Birth Year of Idols\n",
        "Q1_idols = idols_1['Birth_Year'].quantile(0.25)\n",
        "Q3_idols = idols_1['Birth_Year'].quantile(0.75)\n",
        "IQR_idols = Q3_idols - Q1_idols\n",
        "lower_bound_idols = Q1_idols - 1.5 * IQR_idols\n",
        "upper_bound_idols = Q3_idols + 1.5 * IQR_idols\n",
        "\n",
        "outliers_birth_year = idols_1[(idols_1['Birth_Year'] < lower_bound_idols) | (idols_1['Birth_Year'] > upper_bound_idols)]\n",
        "\n",
        "# IQR Method for identifying outliers in Group Size (Members)\n",
        "Q1 = groups_df['Members'].quantile(0.25)\n",
        "Q3 = groups_df['Members'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "outliers_group_size = groups_df[(groups_df['Members'] < lower_bound) | (groups_df['Members'] > upper_bound)]\n",
        "\n",
        "# IQR Method for identifying outliers in Release Year of Videos\n",
        "Q1_videos = videos_1['Release_Year'].quantile(0.25)\n",
        "Q3_videos = videos_1['Release_Year'].quantile(0.75)\n",
        "IQR_videos = Q3_videos - Q1_videos\n",
        "lower_bound_videos = Q1_videos - 1.5 * IQR_videos\n",
        "upper_bound_videos = Q3_videos + 1.5 * IQR_videos\n",
        "\n",
        "outliers_release_year = videos_1[(videos_1['Release_Year'] < lower_bound_videos) | (videos_1['Release_Year'] > upper_bound_videos)]"
      ],
      "metadata": {
        "id": "lL2cLmK8VWYd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Count the number of outliers in Birth Year of Idols\n",
        "outlier_count = len(outliers_birth_year)\n",
        "\n",
        "# Print the outliers and the count\n",
        "print(f\"Total number of outliers in Birth Year of Idols: {outlier_count}\")\n",
        "outliers_birth_year"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "WBf7tXSPYoTG",
        "outputId": "fe6b3a37-a1b1-451e-c0b8-d377eabdbea1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total number of outliers in Birth Year of Idols: 9\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Stage_Name     Full_Name             Group      Country  Birthplace  \\\n",
              "323    Heechul   Kim Heechul      Super Junior  South Korea  Hoengseong   \n",
              "480        Jea    Kim Hyojin  Brown Eyed Girls  South Korea       Seoul   \n",
              "599     Jungah    Kim Jungah               NaN  South Korea     Incheon   \n",
              "624       Kahi  Park Jiyoung               NaN  South Korea       Daegu   \n",
              "698    Leeteuk  Park Jeongsu      Super Junior  South Korea       Seoul   \n",
              "789      Miryo      Jo Mihye  Brown Eyed Girls  South Korea       Seoul   \n",
              "822     Narsha   Park Hyojin  Brown Eyed Girls  South Korea       Seoul   \n",
              "844        Psy  Park Jaesang               NaN  South Korea       Seoul   \n",
              "848       Rain   Jung Jihoon               NaN  South Korea      Seosan   \n",
              "\n",
              "     Gender  Birth_Month  Birth_Year  \n",
              "323    Male            7        1983  \n",
              "480  Female            9        1981  \n",
              "599  Female            8        1983  \n",
              "624  Female           12        1980  \n",
              "698    Male            7        1983  \n",
              "789  Female           11        1981  \n",
              "822  Female           12        1981  \n",
              "844    Male           12        1977  \n",
              "848    Male            6        1982  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-12742fca-cd4c-401e-be52-b81599a03cc2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Stage_Name</th>\n",
              "      <th>Full_Name</th>\n",
              "      <th>Group</th>\n",
              "      <th>Country</th>\n",
              "      <th>Birthplace</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Birth_Month</th>\n",
              "      <th>Birth_Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>323</th>\n",
              "      <td>Heechul</td>\n",
              "      <td>Kim Heechul</td>\n",
              "      <td>Super Junior</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Hoengseong</td>\n",
              "      <td>Male</td>\n",
              "      <td>7</td>\n",
              "      <td>1983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>480</th>\n",
              "      <td>Jea</td>\n",
              "      <td>Kim Hyojin</td>\n",
              "      <td>Brown Eyed Girls</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Female</td>\n",
              "      <td>9</td>\n",
              "      <td>1981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>Jungah</td>\n",
              "      <td>Kim Jungah</td>\n",
              "      <td>NaN</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Incheon</td>\n",
              "      <td>Female</td>\n",
              "      <td>8</td>\n",
              "      <td>1983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>624</th>\n",
              "      <td>Kahi</td>\n",
              "      <td>Park Jiyoung</td>\n",
              "      <td>NaN</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Daegu</td>\n",
              "      <td>Female</td>\n",
              "      <td>12</td>\n",
              "      <td>1980</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>698</th>\n",
              "      <td>Leeteuk</td>\n",
              "      <td>Park Jeongsu</td>\n",
              "      <td>Super Junior</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Male</td>\n",
              "      <td>7</td>\n",
              "      <td>1983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>789</th>\n",
              "      <td>Miryo</td>\n",
              "      <td>Jo Mihye</td>\n",
              "      <td>Brown Eyed Girls</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Female</td>\n",
              "      <td>11</td>\n",
              "      <td>1981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>822</th>\n",
              "      <td>Narsha</td>\n",
              "      <td>Park Hyojin</td>\n",
              "      <td>Brown Eyed Girls</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Female</td>\n",
              "      <td>12</td>\n",
              "      <td>1981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>844</th>\n",
              "      <td>Psy</td>\n",
              "      <td>Park Jaesang</td>\n",
              "      <td>NaN</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seoul</td>\n",
              "      <td>Male</td>\n",
              "      <td>12</td>\n",
              "      <td>1977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>848</th>\n",
              "      <td>Rain</td>\n",
              "      <td>Jung Jihoon</td>\n",
              "      <td>NaN</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>Seosan</td>\n",
              "      <td>Male</td>\n",
              "      <td>6</td>\n",
              "      <td>1982</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-12742fca-cd4c-401e-be52-b81599a03cc2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-12742fca-cd4c-401e-be52-b81599a03cc2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-12742fca-cd4c-401e-be52-b81599a03cc2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-688ffcba-0475-4314-8012-4fb53234bcdc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-688ffcba-0475-4314-8012-4fb53234bcdc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-688ffcba-0475-4314-8012-4fb53234bcdc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7b56ade3-a514-45f7-903d-d3a79eb8c01a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('outliers_birth_year')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7b56ade3-a514-45f7-903d-d3a79eb8c01a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('outliers_birth_year');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "outliers_birth_year",
              "summary": "{\n  \"name\": \"outliers_birth_year\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"Stage_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Psy\",\n          \"Jea\",\n          \"Miryo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Full_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Park Jaesang\",\n          \"Kim Hyojin\",\n          \"Jo Mihye\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Brown Eyed Girls\",\n          \"Super Junior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"South Korea\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birthplace\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Seoul\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birth_Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Birth_Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1981\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Count the number of outliers in Group Size (Members)\n",
        "outlier_group_size_count = len(outliers_group_size)\n",
        "\n",
        "# Print the outliers and the count\n",
        "print(f\"Total number of outliers in Group Size (Members): {outlier_group_size_count}\")\n",
        "outliers_group_size"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "id": "GaUk6sTDYOf_",
        "outputId": "ea84de11-372b-4dbc-88ff-23a7f814bd66"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total number of outliers in Group Size (Members): 10\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Name         Company  Members  Orig._Memb. Active Group_Type  \\\n",
              "1             14U              Bg       14           14    Yes       Boys   \n",
              "91            Nct              Sm       18           18    Yes       Boys   \n",
              "105     Seventeen          Pledis       13           13    Yes       Boys   \n",
              "116  Super Junior              Sm       11           12    Yes       Boys   \n",
              "120      The Boyz         Cre.Ker       12           12    Yes       Boys   \n",
              "135       Varsity             Gkc       12           12    Yes       Boys   \n",
              "143     Wanna One             Ymc       11           11     No       Boys   \n",
              "237        Iz*One  Off The Record       12           12    Yes      Girls   \n",
              "245         Loona      Blockberry       12           12    Yes      Girls   \n",
              "296          Wjsn        Starship       13           12    Yes      Girls   \n",
              "\n",
              "     Debut_Month  Debut_Year  \n",
              "1              4        2017  \n",
              "91             4        2016  \n",
              "105            5        2015  \n",
              "116           11        2005  \n",
              "120           12        2017  \n",
              "135            1        2017  \n",
              "143            8        2017  \n",
              "237           10        2018  \n",
              "245           10        2016  \n",
              "296            2        2016  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f1ae091-209e-45b5-93ce-835f1944f650\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Company</th>\n",
              "      <th>Members</th>\n",
              "      <th>Orig._Memb.</th>\n",
              "      <th>Active</th>\n",
              "      <th>Group_Type</th>\n",
              "      <th>Debut_Month</th>\n",
              "      <th>Debut_Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14U</td>\n",
              "      <td>Bg</td>\n",
              "      <td>14</td>\n",
              "      <td>14</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Boys</td>\n",
              "      <td>4</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>Nct</td>\n",
              "      <td>Sm</td>\n",
              "      <td>18</td>\n",
              "      <td>18</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Boys</td>\n",
              "      <td>4</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>Seventeen</td>\n",
              "      <td>Pledis</td>\n",
              "      <td>13</td>\n",
              "      <td>13</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Boys</td>\n",
              "      <td>5</td>\n",
              "      <td>2015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116</th>\n",
              "      <td>Super Junior</td>\n",
              "      <td>Sm</td>\n",
              "      <td>11</td>\n",
              "      <td>12</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Boys</td>\n",
              "      <td>11</td>\n",
              "      <td>2005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>The Boyz</td>\n",
              "      <td>Cre.Ker</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Boys</td>\n",
              "      <td>12</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135</th>\n",
              "      <td>Varsity</td>\n",
              "      <td>Gkc</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Boys</td>\n",
              "      <td>1</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>Wanna One</td>\n",
              "      <td>Ymc</td>\n",
              "      <td>11</td>\n",
              "      <td>11</td>\n",
              "      <td>No</td>\n",
              "      <td>Boys</td>\n",
              "      <td>8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>237</th>\n",
              "      <td>Iz*One</td>\n",
              "      <td>Off The Record</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Girls</td>\n",
              "      <td>10</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>Loona</td>\n",
              "      <td>Blockberry</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Girls</td>\n",
              "      <td>10</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>Wjsn</td>\n",
              "      <td>Starship</td>\n",
              "      <td>13</td>\n",
              "      <td>12</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Girls</td>\n",
              "      <td>2</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f1ae091-209e-45b5-93ce-835f1944f650')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f1ae091-209e-45b5-93ce-835f1944f650 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f1ae091-209e-45b5-93ce-835f1944f650');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f6a5122e-c26a-4dda-8775-4f3315d9f1a3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6a5122e-c26a-4dda-8775-4f3315d9f1a3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f6a5122e-c26a-4dda-8775-4f3315d9f1a3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_54b71a50-a68e-445c-b5e6-1ea80ff3e84e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('outliers_group_size')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_54b71a50-a68e-445c-b5e6-1ea80ff3e84e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('outliers_group_size');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "outliers_group_size",
              "summary": "{\n  \"name\": \"outliers_group_size\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Loona\",\n          \"Nct\",\n          \"Varsity\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Blockberry\",\n          \"Sm\",\n          \"Ymc\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Members\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 11,\n        \"max\": 18,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          18,\n          12,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Orig._Memb.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 11,\n        \"max\": 18,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          18,\n          11,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Active\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Group_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Girls\",\n          \"Boys\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut_Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debut_Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2016,\n          2018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Count the number of outliers in Release Year of Videos\n",
        "outlier_release_year_count = len(outliers_release_year)\n",
        "\n",
        "# Print the outliers and the count\n",
        "print(f\"Total number of outliers in Release Year of Videos: {outlier_release_year_count}\")\n",
        "outliers_release_year"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "1aEnzBYgYTiz",
        "outputId": "ae215295-e1cd-4b42-a56e-c47f644bd6a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total number of outliers in Release Year of Videos: 98\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Artist            Song_Name                         Video  \\\n",
              "3674  Tvxq, Super Junior    Show Me Your Love  https://youtu.be/ZgXa7AIqd6A   \n",
              "3675               V.O.S           Time Limit  https://youtu.be/Fg0_Tjh4nGI   \n",
              "3676             Bigbang       Forever With U  https://youtu.be/GYCD2KUB3WQ   \n",
              "3677             Bigbang         Goodbye Baby  https://youtu.be/smKuwvakHd0   \n",
              "3678        Super Junior    Twins (Knock Out)  https://youtu.be/SrazFGFRnhM   \n",
              "...                  ...                  ...                           ...   \n",
              "3767  Seo Taiji And Boys             Eternity  https://youtu.be/74usU0gB7r0   \n",
              "3768  Seo Taiji And Boys          Anyhow Song  https://youtu.be/L-AxO7EPU8c   \n",
              "3769  Seo Taiji And Boys               To You  https://youtu.be/cxIAiAUyvXo   \n",
              "3770  Seo Taiji And Boys               I Know  https://youtu.be/OEDHEzs5kyk   \n",
              "3771  Seo Taiji And Boys  You, In The Fantasy  https://youtu.be/KGcwGoXfUDk   \n",
              "\n",
              "     Type  Release  Release_Month  Release_Year  \n",
              "3674  Boy  Special             12          2005  \n",
              "3675  Boy    Major             11          2005  \n",
              "3676  Boy    Major             11          2005  \n",
              "3677  Boy    Major             11          2005  \n",
              "3678  Boy    Major             11          2005  \n",
              "...   ...      ...            ...           ...  \n",
              "3767  Boy    Minor              8          1994  \n",
              "3768  Boy    Major              6          1993  \n",
              "3769  Boy    Minor              6          1993  \n",
              "3770  Boy    Major              3          1992  \n",
              "3771  Boy    Minor              3          1992  \n",
              "\n",
              "[98 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e1d38240-8baf-4f92-9b77-2da87909b528\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Artist</th>\n",
              "      <th>Song_Name</th>\n",
              "      <th>Video</th>\n",
              "      <th>Type</th>\n",
              "      <th>Release</th>\n",
              "      <th>Release_Month</th>\n",
              "      <th>Release_Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3674</th>\n",
              "      <td>Tvxq, Super Junior</td>\n",
              "      <td>Show Me Your Love</td>\n",
              "      <td>https://youtu.be/ZgXa7AIqd6A</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Special</td>\n",
              "      <td>12</td>\n",
              "      <td>2005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3675</th>\n",
              "      <td>V.O.S</td>\n",
              "      <td>Time Limit</td>\n",
              "      <td>https://youtu.be/Fg0_Tjh4nGI</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "      <td>11</td>\n",
              "      <td>2005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3676</th>\n",
              "      <td>Bigbang</td>\n",
              "      <td>Forever With U</td>\n",
              "      <td>https://youtu.be/GYCD2KUB3WQ</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "      <td>11</td>\n",
              "      <td>2005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3677</th>\n",
              "      <td>Bigbang</td>\n",
              "      <td>Goodbye Baby</td>\n",
              "      <td>https://youtu.be/smKuwvakHd0</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "      <td>11</td>\n",
              "      <td>2005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3678</th>\n",
              "      <td>Super Junior</td>\n",
              "      <td>Twins (Knock Out)</td>\n",
              "      <td>https://youtu.be/SrazFGFRnhM</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "      <td>11</td>\n",
              "      <td>2005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3767</th>\n",
              "      <td>Seo Taiji And Boys</td>\n",
              "      <td>Eternity</td>\n",
              "      <td>https://youtu.be/74usU0gB7r0</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Minor</td>\n",
              "      <td>8</td>\n",
              "      <td>1994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3768</th>\n",
              "      <td>Seo Taiji And Boys</td>\n",
              "      <td>Anyhow Song</td>\n",
              "      <td>https://youtu.be/L-AxO7EPU8c</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "      <td>6</td>\n",
              "      <td>1993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3769</th>\n",
              "      <td>Seo Taiji And Boys</td>\n",
              "      <td>To You</td>\n",
              "      <td>https://youtu.be/cxIAiAUyvXo</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Minor</td>\n",
              "      <td>6</td>\n",
              "      <td>1993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3770</th>\n",
              "      <td>Seo Taiji And Boys</td>\n",
              "      <td>I Know</td>\n",
              "      <td>https://youtu.be/OEDHEzs5kyk</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Major</td>\n",
              "      <td>3</td>\n",
              "      <td>1992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3771</th>\n",
              "      <td>Seo Taiji And Boys</td>\n",
              "      <td>You, In The Fantasy</td>\n",
              "      <td>https://youtu.be/KGcwGoXfUDk</td>\n",
              "      <td>Boy</td>\n",
              "      <td>Minor</td>\n",
              "      <td>3</td>\n",
              "      <td>1992</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>98 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e1d38240-8baf-4f92-9b77-2da87909b528')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e1d38240-8baf-4f92-9b77-2da87909b528 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e1d38240-8baf-4f92-9b77-2da87909b528');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-525899b4-c345-4667-99ce-38038c5eb04c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-525899b4-c345-4667-99ce-38038c5eb04c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-525899b4-c345-4667-99ce-38038c5eb04c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8a53de61-5324-4010-86d8-1356ba1a3d4b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('outliers_release_year')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8a53de61-5324-4010-86d8-1356ba1a3d4b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('outliers_release_year');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "outliers_release_year",
              "summary": "{\n  \"name\": \"outliers_release_year\",\n  \"rows\": 98,\n  \"fields\": [\n    {\n      \"column\": \"Artist\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"Tvxq, Super Junior\",\n          \"H.O.T\",\n          \"Cool\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Song_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 98,\n        \"samples\": [\n          \"Because Of Love\",\n          \"For Dear Person\",\n          \"Anyhow Song\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 98,\n        \"samples\": [\n          \"https://youtu.be/bPXT9sM9M4g\",\n          \"https://youtu.be/z34m3eClr7E\",\n          \"https://youtu.be/L-AxO7EPU8c\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Boy\",\n          \"Co-Ed\",\n          \"Girl\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Major\",\n          \"CF\",\n          \"Special\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release_Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          1,\n          5,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release_Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1996,\n          1994,\n          2005\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "videos_1.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bwxrAK1OZPkb",
        "outputId": "8060e122-0a16-4c03-b6b0-3518b7444062"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3770, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "<font color='#b86fa5'>*When applying the Interquartile Range (IQR) method:*\n",
        "\n",
        "\n",
        "<font color='#b86fa5'>*Idols and Groups: The number of outliers detected is very low, indicating that most data points fall within a reasonable range. This supports the decision to retain outliers in these categories as their impact on the analysis is minimal.*\n",
        "\n",
        "\n",
        "<font color='#b86fa5'>*Videos: Although the number of outliers is higher in the video dataset (98 out of 3770), it still represents a small fraction of the total data (approximately 2.6%). This low proportion suggests that including these outliers will not distort the results, allowing for a more comprehensive analysis.*"
      ],
      "metadata": {
        "id": "TvuqBccscqAW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#<font color='#b86fa5'> **5. Identify patterns & trends responding business questions**"
      ],
      "metadata": {
        "id": "ZytPi_-CVZLw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>1. Most Common Birthplace & Country\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** Which birthplace and country are most common among idols?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective** Discover regions with a high concentration of emerging talent."
      ],
      "metadata": {
        "id": "62ZA3BuMdodq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Value counts for Birthplace and Country\n",
        "birthplace_counts = idols_1['Birthplace'].value_counts()\n",
        "country_counts = idols_1['Country'].value_counts()\n",
        "\n",
        "# Most common birthplace and country\n",
        "common_birthplace = birthplace_counts.idxmax()\n",
        "common_country = country_counts.idxmax()\n",
        "\n",
        "print(\"Most common birthplace and its count:\")\n",
        "print(f\"{common_birthplace}: {birthplace_counts[common_birthplace]}\")\n",
        "\n",
        "print(\"\\nMost common country and its count:\")\n",
        "print(f\"{common_country}: {country_counts[common_country]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1vqsbL_oVaC8",
        "outputId": "4477241b-1a86-4307-f309-b498d9f7713d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Most common birthplace and its count:\n",
            "Seoul: 809\n",
            "\n",
            "Most common country and its count:\n",
            "South Korea: 1204\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>1/2. International countries in K-pop\n",
        "\n",
        "<font color='#b86fa5'>- Which countries are represented in the dataset that are not South Korea?\n",
        "\n",
        "<font color='#b86fa5'>- Could other countries be succsesful in K-Pop?"
      ],
      "metadata": {
        "id": "wklMqwCheTgy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter out South Korea and display unique countries along with their counts\n",
        "international_countries_counts = idols_1[idols_1['Country'] != 'South Korea']['Country'].value_counts()\n",
        "\n",
        "print(\"International countries (excluding South Korea) and their counts:\")\n",
        "print(international_countries_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kO58TC2FeUXX",
        "outputId": "bddb46ad-c97d-406d-f4a8-346048c78fbd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "International countries (excluding South Korea) and their counts:\n",
            "Country\n",
            "China          39\n",
            "Japan          27\n",
            "Usa            14\n",
            "Thailand        6\n",
            "Taiwan          6\n",
            "Canada          5\n",
            "Hong Kong       4\n",
            "Indonesia       2\n",
            "Australia       1\n",
            "Malaysia        1\n",
            "Philippines     1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>2. Gender Distribution\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** What is the gender distribution of idols?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective:** Understand the gender balance in the industry.\n"
      ],
      "metadata": {
        "id": "hG6N52CCfqVH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Gender distribution\n",
        "gender_distribution = idols_1['Gender'].value_counts(normalize=True) * 100\n",
        "\n",
        "print(\"Gender distribution in percentages:\")\n",
        "print(gender_distribution)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xl_iUHpPgB09",
        "outputId": "6467c5b3-bfa3-4c13-8439-4940e929f6e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gender distribution in percentages:\n",
            "Gender\n",
            "Male      51.603053\n",
            "Female    48.396947\n",
            "Name: proportion, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>3. Most Common Stage Name\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** What is the most common stage name?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective:** Find out the most sucsesfull places to the festival."
      ],
      "metadata": {
        "id": "khjlocfkglRs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Most common stage name\n",
        "common_stage_name = idols_1['Stage_Name'].value_counts().idxmax()\n",
        "\n",
        "# Where to find?\n",
        "country = idols_1['Country'].value_counts().idxmax()\n",
        "\n",
        "print(f\"Most common stage name: {common_stage_name}\")\n",
        "print(f\"In {country}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5w_iDtMVhriY",
        "outputId": "cc451537-239e-461f-fc04-faaed48267a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Most common stage name: Jisoo\n",
            "In South Korea\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>4. Active vs. Inactive Groups\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** How many groups are currently active vs. inactive?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective:** Focus on active groups for future collaborations.\n"
      ],
      "metadata": {
        "id": "1ejpvbpFik0Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Active vs. inactive groups **in 2020\n",
        "group_status = groups_df['Active'].value_counts()\n",
        "group_status.plot(kind='pie', autopct='%1.1f%%', title='Active vs Inactive Groups')\n",
        "plt.ylabel('')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "xXy3hiuFhrfc",
        "outputId": "9a07c0d8-4678-43a6-d6a5-feed44b0fb71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>5. Group Size Analysis\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** What is the distribution of group sizes?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective:** Determine optimal group sizes for new groups."
      ],
      "metadata": {
        "id": "OVsMIdOFj6g4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Group size analysis\n",
        "group_size_distribution = groups_df['Members'].value_counts()\n",
        "group_size_distribution.plot(kind='bar', title='Group Size Distribution')\n",
        "plt.xlabel('Number of Members')\n",
        "plt.ylabel('Count')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "u_iyUtAhhrcO",
        "outputId": "a0e4eec4-4900-4b9a-f6db-f7b894d0f7e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>6. Successful Debut Years\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** Which debut years were the most successful?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective:** Identify trends in debut success over time."
      ],
      "metadata": {
        "id": "GgTbMrhrkM3L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Most successful debut years\n",
        "debut_years = groups_df['Debut_Year'].value_counts().nlargest(3)\n",
        "\n",
        "print(\"Most successful debut years:\")\n",
        "print(debut_years)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "64YeK-Z4hrZC",
        "outputId": "33334992-248a-42e9-c650-e3546837faae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Most successful debut years:\n",
            "Debut_Year\n",
            "2017    49\n",
            "2018    33\n",
            "2016    29\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>7. Common Company Names\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** Which companies produce the most successful groups?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective:** Partner with top companies for festival lineups.\n"
      ],
      "metadata": {
        "id": "FdJr7fKVkgFY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Most common company names\n",
        "common_companies = groups_df['Company'].value_counts().nlargest(3)\n",
        "\n",
        "print(\"Most common companies:\")\n",
        "print(common_companies)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iDJ68SsGhrWL",
        "outputId": "2d0aec6c-be6b-4e57-fc00-acbbe9f89d6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Most common companies:\n",
            "Company\n",
            "Sm     12\n",
            "Jyp     9\n",
            "Fnc     7\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>8. Most Successful Artists\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** Which artists have the most successful videos?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective:** Prioritize popular artists for festival performances."
      ],
      "metadata": {
        "id": "DEF_737NkxEp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Most successful artists\n",
        "successful_artists = videos_1['Artist'].value_counts().nlargest(3)\n",
        "\n",
        "print(\"Most successful artists:\")\n",
        "print(successful_artists)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IfsG_6ggkw3Z",
        "outputId": "e784591d-274c-4734-b384-093b8b595a95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Most successful artists:\n",
            "Artist\n",
            "Ftisland        57\n",
            "Super Junior    38\n",
            "T-Ara           38\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>9. Release Date Analysis\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** What trends are there in video release dates?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective:** Schedule releases around popular times."
      ],
      "metadata": {
        "id": "ZqH5YQZ_lGat"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Release date analysis\n",
        "release_date_distribution = videos_1['Release_Year'].value_counts().sort_values(ascending=False)\n",
        "\n",
        "# Display top 5 years with the highest release counts\n",
        "top_release_years = release_date_distribution.head(5)\n",
        "\n",
        "# Display in a table\n",
        "print(\"Top 5 Release Years with the Highest Counts:\")\n",
        "print(top_release_years)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J0Mllxw6l25-",
        "outputId": "212174f8-3572-4c76-fd34-597107ccb58c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 5 Release Years with the Highest Counts:\n",
            "Release_Year\n",
            "2018    502\n",
            "2019    502\n",
            "2017    469\n",
            "2016    375\n",
            "2015    318\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <font color='#b86fa5'>10. Release Type and Format\n",
        "\n",
        "<font color='#b86fa5'>- **Question:** What are the most common types and formats of releases?\n",
        "\n",
        "<font color='#b86fa5'> - **Objective:** Align with popular formats for new releases."
      ],
      "metadata": {
        "id": "ICHJMD2BmKlM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Most common release types\n",
        "release_type_distribution = videos_1['Type'].value_counts()\n",
        "\n",
        "# Plot the bar chart with the 'Paired' palette, and assign hue to the 'Type'\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(x=release_type_distribution.index, y=release_type_distribution.values, hue=release_type_distribution.index, palette='Paired', dodge=False)\n",
        "\n",
        "# Titles and labels\n",
        "plt.title('Release Type Distribution', fontsize=16)\n",
        "plt.xlabel('Type', fontsize=14)\n",
        "plt.ylabel('Count', fontsize=14)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n",
        "\n",
        "# Display value counts\n",
        "print(\"Release Type Distribution:\")\n",
        "print(release_type_distribution)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 732
        },
        "id": "cEL4tXtQkwux",
        "outputId": "1374b3fd-07a4-4511-8859-7b4c32d587cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Release Type Distribution:\n",
            "Type\n",
            "Boy          1968\n",
            "Girl         1326\n",
            "Girl Solo     204\n",
            "Boy Solo      139\n",
            "Co-Ed         132\n",
            "Special         1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color='#b86fa5'>\n",
        "\n",
        "#<font color='#b86fa5'>  **6. KEY INSIGHTS**\n",
        "\n",
        "1. <font color='#b86fa5'>**Most Common Birthplace & Country:**  \n",
        "   - <font color='#b86fa5'>Most idols are born in **Seoul** (809 idols), and **South Korea** dominates with 1,204 idols in the dataset.  \n",
        "   - This underscores Seoul as a central hub for K-pop talent.\n",
        "\n",
        "2. <font color='#b86fa5'>**International Talent Representation:**  \n",
        "   - <font color='#b86fa5'>Idols from **China** (39), **Japan** (27), and other countries (such as the USA, Thailand, and Taiwan) show that K-pop's reach extends globally.  \n",
        "   - This indicates opportunities for scouting emerging talent from regions outside South Korea, particularly from China and Japan, which have the largest presence.\n",
        "\n",
        "3. <font color='#b86fa5'>**Gender Distribution:**  \n",
        "   - <font color='#b86fa5'>The industry maintains a relatively balanced gender distribution: **51.6% male** and **48.4% female** idols.  \n",
        "   - This balance supports the need for diverse talent scouting and gender representation in future K-pop groups.\n",
        "\n",
        "4. <font color='#b86fa5'>**Most Common Stage Name:**  \n",
        "   - <font color='#b86fa5'>**Jisoo** is the most common stage name in South Korea, highlighting the popularity of certain idols for recognition and potential collaboration opportunities in the festival space.\n",
        "\n",
        "5. <font color='#b86fa5'>**Active vs. Inactive Groups:**  \n",
        "   - <font color='#b86fa5'>The dataset shows **66 active groups** and **30 inactive groups**, emphasizing the vast pool of active groups available for festival performances.\n",
        "\n",
        "6. <font color='#b86fa5'>**Group Size Distribution:**  \n",
        "   - <font color='#b86fa5'>Most groups consist of **5 members**, which is the most common group size. This trend can guide the formation of new groups and future collaborations.\n",
        "\n",
        "7. <font color='#b86fa5'>**Successful Debut Years:**  \n",
        "   - <font color='#b86fa5'>The most successful debut years are **2017 (49 debuts), 2018 (33 debuts), and 2016 (29 debuts)**, reflecting peak years for new group introductions in K-pop.\n",
        "\n",
        "8. <font color='#b86fa5'>**Top Companies:**  \n",
        "   - <font color='#b86fa5'>**SM Entertainment** (12), **JYP Entertainment** (9), and **FNC Entertainment** (7) are the top companies producing successful groups.  \n",
        "   - Partnering with these companies could provide a strong foundation for festival lineups.\n",
        "\n",
        "9. <font color='#b86fa5'>**Most Successful Artists:**  \n",
        "   - <font color='#b86fa5'>The most successful artists based on video counts are **FTISLAND (57 videos), Super Junior (38 videos), and T-ARA (38 videos)**, indicating their popularity and potential as festival headliners.\n",
        "\n",
        "10. <font color='#b86fa5'>**Video Release Trends:**  \n",
        "    - <font color='#b86fa5'>The peak years for video releases are **2018 and 2019 (502 releases each), 2017 (469 releases), 2016 (375 releases)**, and **2015 (318 releases)**, signaling the best years for planning strategic release dates for future projects.\n",
        "\n",
        "11. <font color='#b86fa5'>**Release Type and Format:**  \n",
        "    - <font color='#b86fa5'>The most common release types are **Boy Groups (1968 videos)**, followed by **Girl Groups (1326 videos)**, **Girl Solo (204 videos)**, and **Boy Solo (139 videos)**.  \n",
        "    - Understanding the release types and preferences can help shape future K-pop productions and festival performances.\n",
        "\n",
        "</font>\n"
      ],
      "metadata": {
        "id": "yLhkZB2WupYG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#<font color='#b86fa5'>  7. BUSINESS STRATEGY\n",
        "\n",
        "<font color='#b86fa5'>*\n",
        "\n",
        "<font color='#b86fa5'>**1.** <font color='#b86fa5'>**Discovering New Talent:**\n",
        "   Focus on scouting idols born in **Seoul** or internationally, particularly in **China** and **Japan**, where talent is growing. Form groups with around **5 members**, and maintain gender diversity in group compositions to align with the current industry balance.\n",
        "\n",
        "<font color='#b86fa5'>*\n",
        "\n",
        "<font color='#b86fa5'>**2.** <font color='#b86fa5'>**Festival Planning:**\n",
        "\n",
        "   <font color='#b86fa5'>Target **active groups** from top companies like **SM Entertainment**, **JYP Entertainment**, and **FNC Entertainment**. Focus on the most successful **debut years** (2017, 2018, and 2016) for selecting festival performers.  \n",
        "\n",
        "   <font color='#b86fa5'>Prioritize artists with a high number of successful videos, such as **FTISLAND**, **Super Junior**, and **T-ARA**, to maximize festival appeal. Schedule performances and video releases around peak months and successful years, especially **January** and **December**, for strategic timing and maximum audience engagement.\n",
        "\n",
        "  <font color='#b86fa5'><font color='#b86fa5'>**Stage Selection:**\n",
        "   Prioritize hosting the festival at the most common stages, like **Jisoo**, in **South Korea**. This location aligns with the concentration of talent and offers strategic advantages for audience draw and cultural resonance.\n",
        "\n",
        "<font color='#b86fa5'>*\n"
      ],
      "metadata": {
        "id": "Yowdy3IwwC0G"
      }
    }
  ]
}
